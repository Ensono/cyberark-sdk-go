{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "http://example.com",
            "description": "",
            "variables": {}
        }
    ],
    "info": {
        "version": "18a45ad8-77e8-4ecc-873e-787c6de10a60",
        "title": "CyberArkIAG",
        "description": "",
        "termsOfService": "",
        "contact": {},
        "license": {
            "name": ""
        }
    },
    "paths": {
        "/PasswordVault/api/ExtendedAccounts/{AccountID}/overview": {
            "get": {
                "summary": "Extended Account Overview",
                "operationId": "ExtendedAccountOverview",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Authorization"
                    },
                    {
                        "$ref": "#/components/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/components/parameters/AccountID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "v2 API"
                ]
            }
        },
        "/PasswordVault/api/Accounts": {
            "get": {
                "summary": "Get Accounts",
                "description": "This method returns a list of all the accounts in the Vault.\n\nThe user who runs this web service requires **List Accounts** permissions in the Safe.",
                "operationId": "GetAccounts",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/searchType"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/filter"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "v2 API"
                ]
            },
            "post": {
                "summary": "Add Account",
                "description": "This method adds a new privileged account or SSH key to the Vault.\n\nTo run this web service, a user requires the following permission in the Vault:\n\n* Add account\n\nAND either\n\n* Update password\n\nOR\n\n* Update password properties\n\n**Note:** You require an additional license to add SSH keys to the Vault. For more information, contact your CyberArk representative.",
                "operationId": "AddAccount",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    },
                    "201": {
                        "description": "Add Dual Account - 201 Created",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "example": {
                                    "id": "29_7",
                                    "name": "Database-MySQL-db2.joegarcia.dev-cluster02sqluser01",
                                    "address": "db2.joegarcia.dev",
                                    "userName": "cluster02sqluser01",
                                    "platformId": "MySQLServer-DualAccounts",
                                    "safeName": "D-MySQL-Users",
                                    "secretType": "password",
                                    "platformAccountProperties": {
                                        "Index": "1",
                                        "DualAccountStatus": "Active",
                                        "VirtualUsername": "cluster02sqluser"
                                    },
                                    "secretManagement": {
                                        "automaticManagementEnabled": false,
                                        "manualManagementReason": "testing",
                                        "lastModifiedTime": 1581084295
                                    },
                                    "createdTime": 1581084295
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "This method adds a new privileged account or SSH key to the Vault.\n\nTo run this web service, a user requires the following permission in the Vault:\n\n* Add account\n\nAND either\n\n* Update password\n\nOR\n\n* Update password properties\n\n**Note:** You require an additional license to add SSH keys to the Vault. For more information, contact your CyberArk representative.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "name": "string",
                                    "address": "string",
                                    "userName": "string",
                                    "platformId": "string",
                                    "safeName": "string",
                                    "secretType": "password",
                                    "secret": "string",
                                    "platformAccountProperties": {
                                        "LogonDomain": "string",
                                        "Port": "integer"
                                    },
                                    "secretManagement": {
                                        "automaticManagementEnabled": true,
                                        "manualManagementReason": "string"
                                    },
                                    "remoteMachinesAccess": {
                                        "remoteMachines": "string",
                                        "accessRestrictedToRemoteMachines": true
                                    }
                                }
                            },
                            "example": "{\n\t\"name\": \"string\",\n\t\"address\": \"string\",\n\t\"userName\": \"string\",\n\t\"platformId\": \"string\",\n\t\"safeName\": \"string\",\n\t\"secretType\": \"password\",\n\t\"secret\": \"string\",\n\t\"platformAccountProperties\": {\n\t\t\"LogonDomain\": \"string\",\n\t\t\"Port\": \"integer\"\n\t},\n\t\"secretManagement\": {\n\t\t\"automaticManagementEnabled\": true,\n\t\t\"manualManagementReason\": \"string\"\n\t},\n\t\"remoteMachinesAccess\": {\n\t\t\"remoteMachines\": \"string\",\n\t\t\"accessRestrictedToRemoteMachines\": true\n\t}\n}"
                        }
                    }
                },
                "tags": [
                    "v2 API"
                ]
            }
        },
        "/PasswordVault/api/Accounts/{AccountID}": {
            "get": {
                "summary": "Get Account Details",
                "description": "This method returns information about an account identified by its ID.\n\nThe user who runs this web service requires **List Accounts** permissions in the Safe where the account is located inside the Vault.",
                "operationId": "GetAccountDetails",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "id": "24_3",
                                    "name": "ANSIBLE-RESTAPI-USER",
                                    "address": "192.168.3.101",
                                    "userName": "Svc_AnsibleREST",
                                    "platformId": "JG-CyberArkVault",
                                    "safeName": "D-CYBR-RESTAPI-ACCTS",
                                    "secretType": "password",
                                    "secretManagement": {
                                        "automaticManagementEnabled": true,
                                        "status": "success",
                                        "lastModifiedTime": 1541876282
                                    },
                                    "createdTime": 1541876282
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "v2 API"
                ]
            },
            "patch": {
                "summary": "Update Account",
                "description": "This method updates an existing account's details. It is not mandatory to send all the account’s details. Any changed values sent in the request will be updated. All other properties values will remain the same.\n\nOn each property, the following operations can be performed:\n\n* Replace - replace the existing value of a property\n* Remove (to remove the property from the account)\n* Add (to add that property to the account)\n\nIt is possible to set several properties using the same command using the following structure:\n\n```json\n[\n\t{\n\t    \"op\": \"replace\",\n\t    \"path\": \"/platformaccountproperties\",\n\t    \"value\": \"{\n\t        \\\"{PropertyID1}\\\":\\\"{Value}\\\",\n\t        \\\"{PropertyID2}\\\":\\\"{Value}\\\",\n\t        \\\"{PropertyID3}\\\":\\\"{Value}\\\"\n\t    }\"\n\t}\n]\n```\n\nWhen sending several operations on the same property, only the last operation will affect the property.",
                "operationId": "UpdateAccount",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "id": "29_3",
                                    "name": "TEST-RESTAPI-uadmin",
                                    "address": "NewAddress",
                                    "userName": "u_admin",
                                    "platformId": "WinDomain",
                                    "safeName": "TEST-RESTAPI",
                                    "secretType": "password",
                                    "secretManagement": {
                                        "automaticManagementEnabled": true,
                                        "lastModifiedTime": 1547468682
                                    },
                                    "createdTime": 1547468682
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "This method updates an existing account's details. It is not mandatory to send all the account’s details. Any changed values sent in the request will be updated. All other properties values will remain the same.\n\nOn each property, the following operations can be performed:\n\n* Replace - replace the existing value of a property\n* Remove (to remove the property from the account)\n* Add (to add that property to the account)\n\nIt is possible to set several properties using the same command using the following structure:\n\n```json\n[\n\t{\n\t    \"op\": \"replace\",\n\t    \"path\": \"/platformaccountproperties\",\n\t    \"value\": \"{\n\t        \\\"{PropertyID1}\\\":\\\"{Value}\\\",\n\t        \\\"{PropertyID2}\\\":\\\"{Value}\\\",\n\t        \\\"{PropertyID3}\\\":\\\"{Value}\\\"\n\t    }\"\n\t}\n]\n```\n\nWhen sending several operations on the same property, only the last operation will affect the property.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": [
                                    {
                                        "op": "replace",
                                        "path": "/address",
                                        "value": "NewAddress"
                                    },
                                    {
                                        "op": "add",
                                        "path": "/port",
                                        "value": "3306"
                                    },
                                    {
                                        "op": "remove",
                                        "path": "/ticketnumber",
                                        "value": ""
                                    }
                                ]
                            },
                            "example": "[\n\t{\n\t\t\"op\": \"replace\",\n\t\t\"path\": \"/address\",\n\t\t\"value\": \"NewAddress\"\n\t},\n\t{\n\t\t\"op\": \"add\",\n\t\t\"path\": \"/port\",\n\t\t\"value\": \"3306\"\n\t},\n\t{\n\t\t\"op\": \"remove\",\n\t\t\"path\": \"/ticketnumber\",\n\t\t\"value\": \"\"\n\t}\n]"
                        }
                    }
                },
                "tags": [
                    "v2 API"
                ]
            },
            "delete": {
                "summary": "Delete Account",
                "description": "This method deletes a specific account in the Vault.\n\nThe user who runs this web service requires **Delete Accounts** permissions in the Vault.",
                "operationId": "DeleteAccount",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "v2 API"
                ]
            }
        },
        "/PasswordVault/WebServices/PIMServices.svc/Accounts/{AccountID}/Activities": {
            "get": {
                "summary": "Get Account Activity",
                "description": "This method returns the activities of a specific account that is identified by its account ID.",
                "operationId": "GetAccountActivity",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "GetAccountActivitiesResult": [
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "CPM Change Password",
                                            "ActivityCode": 24,
                                            "ClientID": "CPM",
                                            "MoreInfo": "address=192.168.3.101;username=Svc_AnsibleREST;",
                                            "Path": "Root",
                                            "Reason": "ImmediateTask",
                                            "Time": "11/10/2018 23:58:03",
                                            "UserName": "PasswordManagerNG"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Store password",
                                            "ActivityCode": 294,
                                            "ClientID": "CPM",
                                            "MoreInfo": "",
                                            "Path": "Root",
                                            "Reason": "",
                                            "Time": "11/10/2018 23:58:02",
                                            "UserName": "PasswordManagerNG"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Retrieve password",
                                            "ActivityCode": 295,
                                            "ClientID": "CPM",
                                            "MoreInfo": "",
                                            "Path": "Root",
                                            "Reason": "CPM",
                                            "Time": "11/10/2018 23:58:02",
                                            "UserName": "PasswordManagerNG"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Retrieve password",
                                            "ActivityCode": 295,
                                            "ClientID": "CPM",
                                            "MoreInfo": "",
                                            "Path": "Root",
                                            "Reason": "CPM",
                                            "Time": "11/10/2018 23:58:02",
                                            "UserName": "PasswordManagerNG"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Delete File Category",
                                            "ActivityCode": 107,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "LastTask",
                                            "Path": "Root",
                                            "Reason": "Old Value=[VerifyTask]",
                                            "Time": "11/10/2018 23:57:41",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Delete File Category",
                                            "ActivityCode": 107,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "CPMStatus",
                                            "Path": "Root",
                                            "Reason": "Old Value=[success]",
                                            "Time": "11/10/2018 23:57:41",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Delete File Category",
                                            "ActivityCode": 107,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "RetriesCount",
                                            "Path": "Root",
                                            "Reason": "Old Value=[-1]",
                                            "Time": "11/10/2018 23:57:41",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Add File Category",
                                            "ActivityCode": 105,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "ResetImmediately",
                                            "Path": "Root",
                                            "Reason": "Value=[ChangeTask]",
                                            "Time": "11/10/2018 23:57:41",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Retrieve password",
                                            "ActivityCode": 295,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "",
                                            "Path": "Root",
                                            "Reason": "(Action: Show Password)",
                                            "Time": "11/10/2018 23:57:30",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "CPM Verify Password",
                                            "ActivityCode": 22,
                                            "ClientID": "CPM",
                                            "MoreInfo": "address=192.168.3.101;username=Svc_AnsibleREST;",
                                            "Path": "Root",
                                            "Reason": "ImmediateTask",
                                            "Time": "11/04/2018 15:49:12",
                                            "UserName": "PasswordManager"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Retrieve password",
                                            "ActivityCode": 295,
                                            "ClientID": "CPM",
                                            "MoreInfo": "",
                                            "Path": "Root",
                                            "Reason": "CPM internal process",
                                            "Time": "11/04/2018 15:49:12",
                                            "UserName": "PasswordManager"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Retrieve password",
                                            "ActivityCode": 295,
                                            "ClientID": "CPM",
                                            "MoreInfo": "",
                                            "Path": "Root",
                                            "Reason": "CPM",
                                            "Time": "11/04/2018 15:49:10",
                                            "UserName": "PasswordManager"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Delete File Category",
                                            "ActivityCode": 107,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "LastTask",
                                            "Path": "Root",
                                            "Reason": "Old Value=[VerifyTask]",
                                            "Time": "11/04/2018 15:45:58",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Delete File Category",
                                            "ActivityCode": 107,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "CPMStatus",
                                            "Path": "Root",
                                            "Reason": "Old Value=[success]",
                                            "Time": "11/04/2018 15:45:58",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Update File Category",
                                            "ActivityCode": 106,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "RetriesCount",
                                            "Path": "Root",
                                            "Reason": "Value=[-1] Old Value=[-1]",
                                            "Time": "11/04/2018 15:45:58",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Add File Category",
                                            "ActivityCode": 105,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "ResetImmediately",
                                            "Path": "Root",
                                            "Reason": "Value=[VerifyTask]",
                                            "Time": "11/04/2018 15:45:58",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Update File Category",
                                            "ActivityCode": 106,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "PolicyID",
                                            "Path": "Root",
                                            "Reason": "Value=[JG-CyberArkVault] Old Value=[CyberArk]",
                                            "Time": "11/04/2018 15:45:51",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Retrieve password",
                                            "ActivityCode": 295,
                                            "ClientID": "AppPrv",
                                            "MoreInfo": "",
                                            "Path": "Root",
                                            "Reason": "Application provider background refresh job",
                                            "Time": "10/21/2018 13:39:22",
                                            "UserName": "Prov_COMPONENTS"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Retrieve password",
                                            "ActivityCode": 295,
                                            "ClientID": "AppPrv",
                                            "MoreInfo": "",
                                            "Path": "Root",
                                            "Reason": "AIM password request",
                                            "Time": "10/21/2018 13:38:57",
                                            "UserName": "Prov_COMPONENTS"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "CPM Verify Password",
                                            "ActivityCode": 22,
                                            "ClientID": "CPM",
                                            "MoreInfo": "address=192.168.3.101;username=Svc_AnsibleREST;",
                                            "Path": "Root",
                                            "Reason": "ImmediateTask",
                                            "Time": "10/21/2018 13:04:25",
                                            "UserName": "PasswordManager"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Retrieve password",
                                            "ActivityCode": 295,
                                            "ClientID": "CPM",
                                            "MoreInfo": "",
                                            "Path": "Root",
                                            "Reason": "CPM internal process",
                                            "Time": "10/21/2018 13:04:25",
                                            "UserName": "PasswordManager"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Retrieve password",
                                            "ActivityCode": 295,
                                            "ClientID": "CPM",
                                            "MoreInfo": "",
                                            "Path": "Root",
                                            "Reason": "CPM",
                                            "Time": "10/21/2018 13:04:24",
                                            "UserName": "PasswordManager"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Add File Category",
                                            "ActivityCode": 105,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "RetriesCount",
                                            "Path": "Root",
                                            "Reason": "Value=[-1]",
                                            "Time": "10/21/2018 13:02:31",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Add File Category",
                                            "ActivityCode": 105,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "ResetImmediately",
                                            "Path": "Root",
                                            "Reason": "Value=[VerifyTask]",
                                            "Time": "10/21/2018 13:02:31",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Add File Category",
                                            "ActivityCode": 105,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "CreationMethod",
                                            "Path": "Root",
                                            "Reason": "Value=[PVWA]",
                                            "Time": "10/21/2018 13:02:23",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Add File Category",
                                            "ActivityCode": 105,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "Address",
                                            "Path": "Root",
                                            "Reason": "Value=[192.168.3.101]",
                                            "Time": "10/21/2018 13:02:23",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Add File Category",
                                            "ActivityCode": 105,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "DeviceType",
                                            "Path": "Root",
                                            "Reason": "Value=[Application]",
                                            "Time": "10/21/2018 13:02:22",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Add File Category",
                                            "ActivityCode": 105,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "UserName",
                                            "Path": "Root",
                                            "Reason": "Value=[Svc_AnsibleREST]",
                                            "Time": "10/21/2018 13:02:22",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Add File Category",
                                            "ActivityCode": 105,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "PolicyID",
                                            "Path": "Root",
                                            "Reason": "Value=[CyberArk]",
                                            "Time": "10/21/2018 13:02:22",
                                            "UserName": "mike"
                                        },
                                        {
                                            "AccountName": "ANSIBLE-RESTAPI-USER",
                                            "Activity": "Store password",
                                            "ActivityCode": 294,
                                            "ClientID": "PVWA",
                                            "MoreInfo": "",
                                            "Path": "Root",
                                            "Reason": "",
                                            "Time": "10/21/2018 13:02:22",
                                            "UserName": "mike"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "v2 API"
                ]
            }
        },
        "/PasswordVault/WebServices/PIMServices.svc/PendingAccounts": {
            "post": {
                "summary": "Add Pending Account",
                "description": "This method enables an account or SSH key that is discovered by an external scanner to be added as a pending account to the Accounts Feed. This facilitates the privileged account workflow, during which users can identify privileged accounts and determine which are onboarded to the Vault.\n\n**Note:** In order to add SSH keys to the Vault, you require an additional license. For more information, contact your CyberArk representative.",
                "operationId": "AddPendingAccount",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method enables an account or SSH key that is discovered by an external scanner to be added as a pending account to the Accounts Feed. This facilitates the privileged account workflow, during which users can identify privileged accounts and determine which are onboarded to the Vault.\n\n**Note:** In order to add SSH keys to the Vault, you require an additional license. For more information, contact your CyberArk representative.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "pendingAccount": {
                                        "UserName": "<user name>",
                                        "Address": "<address>",
                                        "AccountDiscoveryDate": "<YYYY-MM-DDThh:mm:ssZ>",
                                        "AccountEnabled": "<enabled/disabled>",
                                        "AccountOSGroups": "<group name>",
                                        "AccountType": "<domain/local>",
                                        "Domain": "<domain name>",
                                        "PasswordNeverExpires": "<true/false>",
                                        "OSVersion": "<OS version>",
                                        "OU": "<OU>",
                                        "AccountCategory": "<Privileged/Non-privileged>",
                                        "UserDisplayName": "<user display name>",
                                        "AccountDescription": "<description>",
                                        "GID": "<GID>",
                                        "UID": "<UID>",
                                        "OSType": "<Windows/Unix>",
                                        "DiscoveryPlatformType": "<platform name>",
                                        "MachineOSFamily": "<workstation/server>",
                                        "LastLogonDate": "<YYYY-MM-DDThh:mm:ssZ>",
                                        "LastPasswordSetDate": "<YYYY-MM-DDThh:mm:ssZ>",
                                        "AccountExpirationDate": "<YYYY-MM-DDThh:mm:ssZ>",
                                        "AccountCategoryCriteria": "<criteria>"
                                    }
                                }
                            },
                            "example": "{\n\t\"pendingAccount\": {\n\t\t\"UserName\":\"<user name>\",\n\t\t\"Address\":\"<address>\",\n\t\t\"AccountDiscoveryDate\":\"<YYYY-MM-DDThh:mm:ssZ>\",\n\t\t\"AccountEnabled\":\"<enabled/disabled>\", \n\t\t\"AccountOSGroups\":\"<group name>\",\n\t\t\"AccountType\":\"<domain/local>\",\n\t\t\"Domain\":\"<domain name>\",\n\t\t\"PasswordNeverExpires\":\"<true/false>\",\n\t\t\"OSVersion\":\"<OS version>\",\n\t\t\"OU\":\"<OU>\",\n\t\t\"AccountCategory\":\"<Privileged/Non-privileged>\",\n\t\t\"UserDisplayName\":\"<user display name>\",\n\t\t\"AccountDescription\":\"<description>\",\n\t\t\"GID\":\"<GID>\",\n\t\t\"UID\":\"<UID>\",\n\t\t\"OSType\":\"<Windows/Unix>\",\n\t\t\"DiscoveryPlatformType\":\"<platform name>\",\n\t\t\"MachineOSFamily\":\"<workstation/server>\",\n\t\t\"LastLogonDate\":\"<YYYY-MM-DDThh:mm:ssZ>\",\n\t\t\"LastPasswordSetDate\":\"<YYYY-MM-DDThh:mm:ssZ>\",\n\t\t\"AccountExpirationDate\":\"<YYYY-MM-DDThh:mm:ssZ>\",\n\t\t\"AccountCategoryCriteria\":\"<criteria>\"\n\t}\n}"
                        }
                    }
                },
                "tags": [
                    "v2 API"
                ]
            }
        },
        "/PasswordVault/api/Accounts/{AccountID}/LinkAccount": {
            "post": {
                "summary": "Link an Account",
                "description": "This method enables a user to associate a linked account to an existing source account. The linked account can be a Reconcile account, Logon account, or other type of linked account that is defined in the platform configuration.\n  \t\n_**Note:** The type of linked accounts that are allowed are determined by the Platform settings. Each platform can support different types of linked accounts._\n\nTo run this service, the user must have the following Safe member authorizations:\n\n* List accounts - For both the Safe of the linked account and the Safe of the source account\n* Update account properties - For the Safe of the source account",
                "operationId": "LinkanAccount",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method enables a user to associate a linked account to an existing source account. The linked account can be a Reconcile account, Logon account, or other type of linked account that is defined in the platform configuration.\n  \t\n_**Note:** The type of linked accounts that are allowed are determined by the Platform settings. Each platform can support different types of linked accounts._\n\nTo run this service, the user must have the following Safe member authorizations:\n\n* List accounts - For both the Safe of the linked account and the Safe of the source account\n* Update account properties - For the Safe of the source account",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "Name": "ObjectName",
                                    "ExtraPassID": "1/2/3",
                                    "Folder": "Root"
                                }
                            },
                            "example": "{\n    \"Name\": \"ObjectName\",\n    \"ExtraPassID\": \"1/2/3\",\n    \"Folder\": \"Root\"\n}"
                        }
                    }
                },
                "tags": [
                    "v2 API"
                ]
            }
        },
        "/PasswordVault/api/Accounts/AdHocConnect": {
            "post": {
                "summary": "Ad-Hoc Connect through PSM",
                "description": "This method allows you to connect through PSM without using an existing account, by returning settings that can be used with an RDP client application or for the HTML5 gateway.\n\nYou must enable Privileged Session Monitoring and ad-hoc connection via PVWA configuration. For more details, see [Ad Hoc Connections](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/PASIMP/Configuring-Secure-Connect.htm).",
                "operationId": "Ad-HocConnectthroughPSM",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method allows you to connect through PSM without using an existing account, by returning settings that can be used with an RDP client application or for the HTML5 gateway.\n\nYou must enable Privileged Session Monitoring and ad-hoc connection via PVWA configuration. For more details, see [Ad Hoc Connections](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/PASIMP/Configuring-Secure-Connect.htm).",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "UserName": "<User Name>",
                                    "Secret": "<password>",
                                    "Address": "<Address>",
                                    "PlatformId": "<Secure Connect Platform>",
                                    "extraFields": {},
                                    "PSMConnectPrerequisites": {
                                        "ConnectionComponent": "<Connection Component ID>",
                                        "ConnectionType": "<RDPFile or PSMGW>"
                                    }
                                }
                            },
                            "example": "{\n\t\"UserName\":\"<User Name>\",\n\t\"Secret\":\"<password>\",\n\t\"Address\":\"<Address>\",\n\t\"PlatformId\":\"<Secure Connect Platform>\",\n\t\"extraFields\":{},\n\t\"PSMConnectPrerequisites\": {\n\t\t\"ConnectionComponent\":\"<Connection Component ID>\",\n\t\t\"ConnectionType\":\"<RDPFile or PSMGW>\"\n\t}\n}"
                        }
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/API/Accounts/{AccountID}/Change": {
            "post": {
                "summary": "Change Password Immediately",
                "description": "This method marks an account for an immediate credentials change by the CPM to a new random value.\n\nThe user who runs this web service requires the following permission in the Safe where the privileged account is stored:\n\n* Initiate CPM password management operations",
                "operationId": "ChangePasswordImmediately",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method marks an account for an immediate credentials change by the CPM to a new random value.\n\nThe user who runs this web service requires the following permission in the Safe where the privileged account is stored:\n\n* Initiate CPM password management operations",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "ChangeEntireGroup": true
                                }
                            },
                            "example": "{\n\t\"ChangeEntireGroup\" : true\n}"
                        }
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/api/Accounts/{AccountID}/Password/Update": {
            "post": {
                "summary": "Change Password in the Vault Only",
                "description": "This method enables users to set account credentials and change them in the Vault. This will not affect credentials on the target device.\n\nThe user who runs this web service requires **Update password value** permission in the Safe where the privileged account is stored.",
                "operationId": "ChangePasswordintheVaultOnly",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method enables users to set account credentials and change them in the Vault. This will not affect credentials on the target device.\n\nThe user who runs this web service requires **Update password value** permission in the Safe where the privileged account is stored.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "ChangeEntireGroup": false,
                                    "NewCredentials": "<string>"
                                }
                            },
                            "example": "{\n\t\"ChangeEntireGroup\": false,\n\t\"NewCredentials\": \"<string>\"\n}"
                        }
                    }
                },
                "tags": []
            }
        },
        "/passwordvault/api/Accounts/{AccountID}/SetNextPassword": {
            "post": {
                "summary": "Change Password, Set Next Password",
                "description": "This method enables users to set the account's credentials to use for the next CPM change.\n\nThe user who runs this web service requires the following permissions in the Safe where the privileged account is stored:\n\n* Initiate CPM password management operations\n* Specify next password value",
                "operationId": "ChangePassword,SetNextPassword",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method enables users to set the account's credentials to use for the next CPM change.\n\nThe user who runs this web service requires the following permissions in the Safe where the privileged account is stored:\n\n* Initiate CPM password management operations\n* Specify next password value",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "ChangeImmediately": true,
                                    "NewCredentials": "<credentials>"
                                }
                            },
                            "example": "{\n\t\"ChangeImmediately\" : true,\n\t\"NewCredentials\": \"<credentials>\"\n}"
                        }
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/API/Accounts/{AccountID}/CheckIn": {
            "post": {
                "summary": "Check In an Exclusive Account",
                "description": "This method checks an exclusive account into the Vault.\n\n* If the account is managed automatically by the CPM, after it is checked in, the password is changed immediately.\n* If the account is managed manually, a notification is sent to a user who is authorized to change the password. The account is checked in automatically after it has been changed.\n\nThe user who runs this web service requires the following permission in the Safe where the privileged account is stored:\n\n* Initiate CPM password management operations",
                "operationId": "CheckInanExclusiveAccount",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/API/Accounts/{AccountID}/PSMConnect": {
            "post": {
                "summary": "Connect Using PSM",
                "description": "This method enables you to connect to an account through PSM (PSMConnect) using a connection method defined in the PVWA.\n\nA response header defines which connection method is returned.\n\nFor more information, refer to [Privileged Session Management Interface](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/PASIMP/Configuring-the-Privileged-Session-Management-Interface.htm).\n\n## Header Parameter\n\nParameter: Accept\n\nType: String\n\nDescription: The table below describes the expected response format depending on the value of the Accept header in the request, per connection method configuration (RDP File or PSM Gateway).\n\n| PVWA configuration | Optional values | Connection method |\n| --- | --- | --- |\n| RDP | application/json, application/octet-stream (default), `*/ *` | RDPFile (JSON), RDPFile (octet-stream raw) |\n| PSMGW | `* / *` | PSMGW (JSON) - Returns the HTML5 connection data. |\n\n**Note:** To use PSMGW, PSMGW must be configured before using this REST API in order to receive a PSMGW response.",
                "operationId": "ConnectUsingPSM",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Accept"
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method enables you to connect to an account through PSM (PSMConnect) using a connection method defined in the PVWA.\n\nA response header defines which connection method is returned.\n\nFor more information, refer to [Privileged Session Management Interface](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/PASIMP/Configuring-the-Privileged-Session-Management-Interface.htm).\n\n## Header Parameter\n\nParameter: Accept\n\nType: String\n\nDescription: The table below describes the expected response format depending on the value of the Accept header in the request, per connection method configuration (RDP File or PSM Gateway).\n\n| PVWA configuration | Optional values | Connection method |\n| --- | --- | --- |\n| RDP | application/json, application/octet-stream (default), `*/ *` | RDPFile (JSON), RDPFile (octet-stream raw) |\n| PSMGW | `* / *` | PSMGW (JSON) - Returns the HTML5 connection data. |\n\n**Note:** To use PSMGW, PSMGW must be configured before using this REST API in order to receive a PSMGW response.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": "{\n\t\"reason\":\"<Reason>\",\n\t\"TicketingSystemName\":\"<Ticketing system>\",\n\t\"TicketId\":\"<Ticketid>\",\n\t\"ConnectionComponent\":\"<Connection component id>\",\n\t\"ConnectionParams\": {\n\t\t\"<Connection parameter name>\": {\n\t\t\t\"value\":\"<Connection parameter value>\",\n\t\t\t\"ShouldSave\":<true\\false>\n\t\t},\n\t\t\"<Connection parameter name>\": {\n\t\t\t\"value\":\"<Connection parameter value>\",\n\t\t\t\"ShouldSave\":<true\\false>\n\t\t}\n\t}\n}"
                            },
                            "example": "{\n\t\"reason\":\"<Reason>\",\n\t\"TicketingSystemName\":\"<Ticketing system>\",\n\t\"TicketId\":\"<Ticketid>\",\n\t\"ConnectionComponent\":\"<Connection component id>\",\n\t\"ConnectionParams\": {\n\t\t\"<Connection parameter name>\": {\n\t\t\t\"value\":\"<Connection parameter value>\",\n\t\t\t\"ShouldSave\":<true\\false>\n\t\t},\n\t\t\"<Connection parameter name>\": {\n\t\t\t\"value\":\"<Connection parameter value>\",\n\t\t\t\"ShouldSave\":<true\\false>\n\t\t}\n\t}\n}"
                        }
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/api/Accounts/{AccountID}/grantAdministrativeAccess": {
            "post": {
                "summary": "Get Just in Time Access",
                "description": "This method requests and receives access to a target Windows machine with administrative rights. The domain user who runs this web service will be added to the local Administrators group of the target machine.\n\n## Supported target machine environments\n\nJust in Time access is supported on the following end user machine environments:\n\n* Windows Server 2012/2012R2/2016\n* Windows 8, Windows 10\n\n## Configuration\n\nConfigure Just in Time access as described in [Configure Just in Time Access](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/11.3/en/Content/PASIMP/adhoc_access_admin.htm).\n\n## User permissions\n\nMake sure that all users who want to request access to the target Windows machine must have the following permission in the Safe:\n\n* List accounts",
                "operationId": "GetJustinTimeAccess",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/api/Accounts/{AccountID}/Password/Retrieve": {
            "post": {
                "summary": "Get Password Value",
                "description": "This method enables users to retrieve the password or SSH key of an existing account that is identified by its Account ID. It enables users to specify a reason and ticket ID, if required.\n\n**Note:** The ability to retrieve credentials using this REST API is intended for human use only and is not recommended for applications or automated processes, where application-based authentication is required.\n\nFor application or automated processes use cases, refer to the [AAM Credential Providers Online Help](https://docs.cyberark.com/Product-Doc/OnlineHelp/AAM-CP/Latest/en/Default.htm).",
                "operationId": "GetPasswordValue",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method enables users to retrieve the password or SSH key of an existing account that is identified by its Account ID. It enables users to specify a reason and ticket ID, if required.\n\n**Note:** The ability to retrieve credentials using this REST API is intended for human use only and is not recommended for applications or automated processes, where application-based authentication is required.\n\nFor application or automated processes use cases, refer to the [AAM Credential Providers Online Help](https://docs.cyberark.com/Product-Doc/OnlineHelp/AAM-CP/Latest/en/Default.htm).",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": "{\n\t\"reason\":\"<Reason>\",\n\t\"TicketingSystemName\": \"<Ticketing system>\",\n\t\"TicketId\": \"<Ticketid>\",\n\t\"Version\": <version number>,\n\t\"ActionType\": \"<action type - show\\copy\\connect>\n\t\"isUse\": <true\\false>,\n\t\"Machine\": \"<my remote machine address>\"\n}"
                            },
                            "example": "{\n\t\"reason\":\"<Reason>\",\n\t\"TicketingSystemName\": \"<Ticketing system>\",\n\t\"TicketId\": \"<Ticketid>\",\n\t\"Version\": <version number>,\n\t\"ActionType\": \"<action type - show\\copy\\connect>\n\t\"isUse\": <true\\false>,\n\t\"Machine\": \"<my remote machine address>\"\n}"
                        }
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/API/Accounts/{AccountID}/Reconcile": {
            "post": {
                "summary": "Reconcile Password",
                "description": "This method marks an account for automatic reconciliation by the CPM.\n\nThe user who runs this web service requires the following permission in the Safe where the privileged account is stored:\n\n* Initiate CPM password management operations",
                "operationId": "ReconcilePassword",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/API/Accounts/{AccountID}/Verify": {
            "post": {
                "summary": "Verify Password",
                "description": "This method marks an account for verification by the CPM, and can be used in versions from v9.10.\n\nThe user who runs this web service requires the following permission in the Safe where the privileged account is stored:\n\n* Initiate CPM password management operations",
                "operationId": "VerifyPassword",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/WebServices/PIMServices.svc/Accounts/{AccountID}/ChangeCredentials": {
            "put": {
                "summary": "Change Password",
                "description": "This method marks the account for an immediate password change by the CPM to a new random password.\n\nThe user who runs this web service requires the following permission in the Safe where the privileged account is stored:\n\n* Initiate CPM password management operations",
                "operationId": "ChangePassword",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method marks the account for an immediate password change by the CPM to a new random password.\n\nThe user who runs this web service requires the following permission in the Safe where the privileged account is stored:\n\n* Initiate CPM password management operations",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": "{\n\t\"ImmediateChangeByCPM\": <true/false>,\n\t\"ChangeCredsForGroup\": <true/false>\n}"
                            },
                            "example": "{\n\t\"ImmediateChangeByCPM\": <true/false>,\n\t\"ChangeCredsForGroup\": <true/false>\n}"
                        }
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/API/AccountGroups": {
            "get": {
                "summary": "Get Account Group by Safe",
                "description": "This method returns all the account groups in a specific Safe. The user performing this task must have the following permissions in the Safe:\r\n\r\n* Add accounts\r\n* Update account content\r\n* Update account properties\r\n* Create folders",
                "operationId": "GetAccountGroupbySafe",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Safe"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Account Groups"
                ]
            }
        },
        "/PasswordVault/API/AccountGroups/{GroupName}/Members": {
            "get": {
                "summary": "Get Account Group Members",
                "description": "This method returns all the members of an existing account group. These accounts can be either password accounts or SSH Key accounts.\n\n__NOTE: All members of account groups must be stored in the same Safe as the group itself.__\n\nThe user performing this task must have the following permissions in the Safe:\n\n* Add accounts\n* Update account content\n* Update account properties\n* Create folders",
                "operationId": "GetAccountGroupMembers",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/GroupName"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Account Groups"
                ]
            }
        },
        "/API/AccountGroups/": {
            "post": {
                "summary": "Add Account Group",
                "description": "This method enables application managers to define a new account group automatically, and manage accounts as part of a group.\n\nTo create an account group, users require the following permissions in the Safe where the group is created:\n* Add accounts\n* Update account content\n* Update account properties\n* Create folders\n\n**Note:** _The following characters are not supported in URL values in the Body:_ **+ & % #**",
                "operationId": "AddAccountGroup",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method enables application managers to define a new account group automatically, and manage accounts as part of a group.\n\nTo create an account group, users require the following permissions in the Safe where the group is created:\n* Add accounts\n* Update account content\n* Update account properties\n* Create folders\n\n**Note:** _The following characters are not supported in URL values in the Body:_ **+ & % #**",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "GroupName": "{{GroupName}}",
                                    "GroupPlatform": "{{PlatformID}}",
                                    "Safe": "{{Safe}}"
                                }
                            },
                            "example": "{\r\n  \"GroupName\":\"{{GroupName}}\",\r\n  \"GroupPlatform\":\"{{PlatformID}}\",\r\n  \"Safe\":\"{{Safe}}\"\r\n}"
                        }
                    }
                },
                "tags": [
                    "Account Groups"
                ]
            }
        },
        "/API/AccountGroups/{GroupName}/Members": {
            "post": {
                "summary": "Add Account to Account Group",
                "description": "This method adds an account as a member to an existing account group.  The account can contain either a password or SSH key.  All members of an account group must be stored in the same Safe as the group itself.\n\nTo add an account as a member to an account group, users require the following permissions to the Safe where the group is created:\n* Add accounts\n* Update account content\n* Update account properties\n\n**Note:** _The following characters are not support in URL values in the Body:_ **+ & % #**",
                "operationId": "AddAccounttoAccountGroup",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "GroupName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "GroupName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method adds an account as a member to an existing account group.  The account can contain either a password or SSH key.  All members of an account group must be stored in the same Safe as the group itself.\n\nTo add an account as a member to an account group, users require the following permissions to the Safe where the group is created:\n* Add accounts\n* Update account content\n* Update account properties\n\n**Note:** _The following characters are not support in URL values in the Body:_ **+ & % #**",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "AccountID": "{{AccountID}}"
                                }
                            },
                            "example": "{\n  \"AccountID\":\"{{AccountID}}\"\n}"
                        }
                    }
                },
                "tags": [
                    "Account Groups"
                ]
            }
        },
        "/PasswordVault/API/AccountGroups/{GroupName}/Members/{AccountID}": {
            "delete": {
                "summary": "Delete Member from Account Group",
                "description": "This method removes an account member from an account group. This account can be either a password account or an SSH Key account.\r\n\r\nThe user performing this task must have the following permissions in the Safe:\r\n\r\n* Add accounts\r\n* Update account content\r\n* Update account properties\r\n* Create folders",
                "operationId": "DeleteMemberfromAccountGroup",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "GroupName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "GroupName"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Account Groups"
                ]
            }
        },
        "/passwordvault/api/bulkactions/accounts": {
            "get": {
                "summary": "Get All Bulk Account Uploads for User",
                "description": "This method gets the status of all bulk account uploads that the user performed.\n\n**Note:** Bulk account uploads are returned sorted by their creation time in descending order - from the most recent to the oldest. The bulk account uploads that are returned are ones that a specific user created and has authorization to view.",
                "operationId": "GetAllBulkAccountUploadsforUser",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        },
                        "description": "status - returns all bulk account uploads that meet the required status"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        },
                        "description": "number of accounts to return, starting from first account"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Bulk Upload of Accounts"
                ]
            },
            "post": {
                "summary": "Create Bulk Upload of Accounts",
                "description": "This method allows a developer to add multiple accounts to existing Safes. The response contains the ID of the bulk account upload that was performed.\n  \t\n**Note:** This option is only available if you have **Add accounts**, **Update account content**, and **Update account properties** authorization in at least one Safe.",
                "operationId": "CreateBulkUploadofAccounts",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method allows a developer to add multiple accounts to existing Safes. The response contains the ID of the bulk account upload that was performed.\n  \t\n**Note:** This option is only available if you have **Add accounts**, **Update account content**, and **Update account properties** authorization in at least one Safe.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "source": "filename.csv",
                                    "accountsList": [
                                        {
                                            "uploadIndex": "1",
                                            "username": "JohnDoe",
                                            "address": "192.0.2.0",
                                            "platformId": "WinDomain",
                                            "safeName": "WinDomainSafe",
                                            "secret": "123456",
                                            "platformAccountProperties": {
                                                "port": "111"
                                            },
                                            "secretManagement": {
                                                "automaticManagementEnabled": true,
                                                "manualManagementReason": ""
                                            },
                                            "remoteMachinesAccess": {
                                                "accessRestrictedToRemoteMachines": true,
                                                "remoteMachines": "example.com"
                                            },
                                            "groupName": "DomainGroup"
                                        },
                                        {
                                            "uploadIndex": "2",
                                            "username": "JaneDoe",
                                            "address": "198.51.100.0",
                                            "platformId": "WinDesktopLocal",
                                            "safeName": "WinUsersSafe",
                                            "secret": "123456",
                                            "platformAccountProperties": {
                                                "port": "222"
                                            },
                                            "secretManagement": {
                                                "automaticManagementEnabled": true,
                                                "manualManagementReason": ""
                                            },
                                            "remoteMachinesAccess": {
                                                "accessRestrictedToRemoteMachines": true,
                                                "remoteMachines": "example.net"
                                            },
                                            "groupName": "WinGroup"
                                        }
                                    ]
                                }
                            },
                            "example": "{\n    \"source\": \"filename.csv\",\n    \"accountsList\": [\n        {\n            \"uploadIndex\": \"1\",\n            \"username\": \"JohnDoe\",\n            \"address\": \"192.0.2.0\",\n            \"platformId\": \"WinDomain\",\n            \"safeName\": \"WinDomainSafe\",\n            \"secret\": \"123456\",\n            \"platformAccountProperties\": {\n                \"port\": \"111\"\n            },\n            \"secretManagement\": {\n                \"automaticManagementEnabled\": true,\n                \"manualManagementReason\": \"\"\n            },\n            \"remoteMachinesAccess\": {\n                \"accessRestrictedToRemoteMachines\": true,\n                \"remoteMachines\": \"example.com\"\n            },\n            \"groupName\": \"DomainGroup\"\n        },\n        {\n            \"uploadIndex\": \"2\",\n            \"username\": \"JaneDoe\",\n            \"address\": \"198.51.100.0\",\n            \"platformId\": \"WinDesktopLocal\",\n            \"safeName\": \"WinUsersSafe\",\n            \"secret\": \"123456\",\n            \"platformAccountProperties\": {\n                \"port\": \"222\"\n            },\n            \"secretManagement\": {\n                \"automaticManagementEnabled\": true,\n                \"manualManagementReason\": \"\"\n            },\n            \"remoteMachinesAccess\": {\n                \"accessRestrictedToRemoteMachines\": true,\n                \"remoteMachines\": \"example.net\"\n            },\n            \"groupName\": \"WinGroup\"\n        }\n    ]\n}"
                        }
                    }
                },
                "tags": [
                    "Bulk Upload of Accounts"
                ]
            }
        },
        "/passwordvault/api/bulkactions/accounts/{BulkID}": {
            "get": {
                "summary": "Get Bulk Account Upload Result",
                "description": "This method returns the result of the bulk account upload, which is identified by the ID of the bulk account upload. When the upload has finished, the API returns the result. The result contains a list of all the accounts that succeeded or failed to upload.\n  \t\n\n**Note:** Only the user that created the bulk account upload can receive the result of the upload using this API.",
                "operationId": "GetBulkAccountUploadResult",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/BulkID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Bulk Upload of Accounts"
                ]
            }
        },
        "/passwordvault/api/DiscoveredAccounts/{AccountID}": {
            "get": {
                "summary": "Get Discovered Account Details",
                "description": "This method returns information about a discovered account and its dependencies from the Pending Accounts list. The discovered account is identified by its ID.\n\nTo run this web service, the user must be a member of the Vault admins group.\n\n**Note:** Discovered accounts that were onboarded either manually or automatically, according to predefined rules, won't be returned using this method.",
                "operationId": "GetDiscoveredAccountDetails",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "AccountID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "AccountID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": []
            }
        },
        "/passwordvault/api/DiscoveredAccounts": {
            "get": {
                "summary": "Get Discovered Accounts",
                "description": "This method returns a list of all the discovered accounts from the Pending Accounts list. To run this web service, the user must be a member of the Vault admins group.\n  \t\n**Note:** Discovered accounts that were onboarded either manually or automatically, according to predefined rules, won't be returned using this method.\n\nFor more information on available filters, please visit [Filter Parameters](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/11.6/en/Content/WebServices/Get-discovered-accounts.htm#filter-parameters) in the CyberArk API Documentation.",
                "operationId": "GetDiscoveredAccounts",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "example": "platformType eq Windows Server Local AND privileged eq true AND accountEnabled eq true"
                        },
                        "description": "search accounts using platformType, privileged, and/or accountEnabled values"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "example": "admin"
                        },
                        "description": "search is supported for username and address"
                    },
                    {
                        "name": "searchType",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "example": "contains"
                        },
                        "description": "keyword is contained (contains, DEFAULT) or beginning (startswith)"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        },
                        "description": "the offset of the first returned account in the list of results"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        },
                        "description": "the maximum number of accounts to return (maximum value allowed is 1000)"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/api/DiscoveredAccounts": {
            "post": {
                "summary": "Add Discovered Accounts (v10.8+)",
                "description": "This method adds newly discovered accounts and their dependencies.\n\n| Action | Description |\n| --- | --- |\n| Discovered account | Discovered accounts are added to the Pending Accounts list. |\n| Discovered dependency | Discovered dependencies are added to the Pending Accounts list or are automatically added to the corresponding master account that has already been onboarded. |\n| Automatic onboarding | Discovered accounts are onboarded according to matching onboarding rules. If automatic onboarding fails for any reason, the account is added to the Pending Accounts list. |\n\nCurrently, Private SSH Keys are not supported.\n\nThe user who runs this web service requires the following users and permissions:\n\nTo add pending accounts:\n\n* **User:** Owner of PasswordManager_Pending Safe\n* **Permissions:**\n  * Add account\n  * List files\n  * Update account properties\n\nTo onboard the account:\n\n* **User:** Owner of the target Safe of the onboarding rule.\n* **Permissions:**\n  * Add account\n  * Update account properties\n  * Initiate CPM account management operations",
                "operationId": "AddDiscoveredAccounts(v10.8+)",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method adds newly discovered accounts and their dependencies.\n\n| Action | Description |\n| --- | --- |\n| Discovered account | Discovered accounts are added to the Pending Accounts list. |\n| Discovered dependency | Discovered dependencies are added to the Pending Accounts list or are automatically added to the corresponding master account that has already been onboarded. |\n| Automatic onboarding | Discovered accounts are onboarded according to matching onboarding rules. If automatic onboarding fails for any reason, the account is added to the Pending Accounts list. |\n\nCurrently, Private SSH Keys are not supported.\n\nThe user who runs this web service requires the following users and permissions:\n\nTo add pending accounts:\n\n* **User:** Owner of PasswordManager_Pending Safe\n* **Permissions:**\n  * Add account\n  * List files\n  * Update account properties\n\nTo onboard the account:\n\n* **User:** Owner of the target Safe of the onboarding rule.\n* **Permissions:**\n  * Add account\n  * Update account properties\n  * Initiate CPM account management operations",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": "[\n    {\n        \"userName\": \"{{Username}}\",\n        \"address\": \"{{Address}}\",\n        \"platformTypeAccountProperties\": {\n            \"SID\": \"S-1-5-21-304654729-3147011263-1431158397-3154\"\n        },\n        \"accountEnabled\": true,\n        \"osGroups\": \"Backup Operators,IIS_IUSRS,Network Configuration Operators\",\n        \"platformType\": \"{{PlatformName}}\",\n        \"domain\": \"example.com\",\n        \"lastLogonDateTime\": \"1530635686\",\n        \"lastPasswordSetDateTime\": \"1530635786\",\n        \"passwordNeverExpires\": false,\n        \"osVersion\": \"Windows Server 2012 R2 Standard\",\n        \"privileged\": false,\n        \"userDisplayName\": \"User Display Name\",\n        \"description\": \"User Description\",\n        \"passwordExpirationDateTime\": \"1530645686\",\n        \"osFamily\": \"Server\",\n        \"OrganizationalUnit\": \"CN=Users,DC=example,DC=com\",\n        \"additionalProperties\": {\n            \"Port\": 445,\n            \"UserDN\": \"CN=user1,CN=Users,DC=example,DC=com\"\n        },\n        \"Dependencies\": [\n            {\n                \"name\": \"ServiceDep\",\n                \"address\": \"{{Address}}\",\n                \"type\": \"Windows Service\"\n            }\n        ]\n    },\n    {\n        \"userName\": \"amazon_accesskey_user\",\n        \"address\": \"aws.com\",\n        \"discoveryDate\": \"2018-05-03T13:00:00Z\",\n        \"platformType\": \"AWS Access Keys\",\n        \"privileged\": true,\n        \"platformTypeAccountProperties\": {\n            \"awsAccessKeyID\": \"ASASASASSA\",\n            \"awsAccountID\": \"123123123123\"\n        }\n    },\n    {\n        \"userName\": \"amazon_dashboard_user\",\n        \"address\": \"aws.com\",\n        \"discoveryDate\": \"2018-05-03T13:00:00Z\",\n        \"platformType\": \"AWS\",\n        \"privileged\": true,\n        \"platformTypeAccountProperties\": {\n            \"awsAccountID\": \"123123123123\"\n        }\n    },\n    {\n        \"userName\": string,\n        \"address\": string,\n        \"discoveryDate\": \"1530635689\",\n        \"platformType\": \"Azure Password Management\",\n        \"accountEnabled\": true,\n        \"privileged\": true,\n        \"privilegedCriteria\": string,\n        \"platformTypeAccountProperties\": {\n            \"activeDirectoryID\": string\n        }\n    }\n]"
                            },
                            "example": "[\n    {\n        \"userName\": \"{{Username}}\",\n        \"address\": \"{{Address}}\",\n        \"platformTypeAccountProperties\": {\n            \"SID\": \"S-1-5-21-304654729-3147011263-1431158397-3154\"\n        },\n        \"accountEnabled\": true,\n        \"osGroups\": \"Backup Operators,IIS_IUSRS,Network Configuration Operators\",\n        \"platformType\": \"{{PlatformName}}\",\n        \"domain\": \"example.com\",\n        \"lastLogonDateTime\": \"1530635686\",\n        \"lastPasswordSetDateTime\": \"1530635786\",\n        \"passwordNeverExpires\": false,\n        \"osVersion\": \"Windows Server 2012 R2 Standard\",\n        \"privileged\": false,\n        \"userDisplayName\": \"User Display Name\",\n        \"description\": \"User Description\",\n        \"passwordExpirationDateTime\": \"1530645686\",\n        \"osFamily\": \"Server\",\n        \"OrganizationalUnit\": \"CN=Users,DC=example,DC=com\",\n        \"additionalProperties\": {\n            \"Port\": 445,\n            \"UserDN\": \"CN=user1,CN=Users,DC=example,DC=com\"\n        },\n        \"Dependencies\": [\n            {\n                \"name\": \"ServiceDep\",\n                \"address\": \"{{Address}}\",\n                \"type\": \"Windows Service\"\n            }\n        ]\n    },\n    {\n        \"userName\": \"amazon_accesskey_user\",\n        \"address\": \"aws.com\",\n        \"discoveryDate\": \"2018-05-03T13:00:00Z\",\n        \"platformType\": \"AWS Access Keys\",\n        \"privileged\": true,\n        \"platformTypeAccountProperties\": {\n            \"awsAccessKeyID\": \"ASASASASSA\",\n            \"awsAccountID\": \"123123123123\"\n        }\n    },\n    {\n        \"userName\": \"amazon_dashboard_user\",\n        \"address\": \"aws.com\",\n        \"discoveryDate\": \"2018-05-03T13:00:00Z\",\n        \"platformType\": \"AWS\",\n        \"privileged\": true,\n        \"platformTypeAccountProperties\": {\n            \"awsAccountID\": \"123123123123\"\n        }\n    },\n    {\n        \"userName\": string,\n        \"address\": string,\n        \"discoveryDate\": \"1530635689\",\n        \"platformType\": \"Azure Password Management\",\n        \"accountEnabled\": true,\n        \"privileged\": true,\n        \"privilegedCriteria\": string,\n        \"platformTypeAccountProperties\": {\n            \"activeDirectoryID\": string\n        }\n    }\n]"
                        }
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/API/auth/SAML/Logon": {
            "post": {
                "summary": "Logon",
                "description": "This method authenticates a user to the Vault using SAML authentication and returns a token that can be used in subsequent web services calls.\n\n[Example PowerShell Code is available here](https://gist.github.com/infamousjoeg/b44faa299ec3de65bdd1d3b8474b0649)",
                "operationId": "Logon",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/concurrentSession"
                    },
                    {
                        "$ref": "#/components/parameters/apiUse"
                    },
                    {
                        "$ref": "#/components/parameters/SAMLResponse"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/x-www-form-urlencoded"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method authenticates a user to the Vault using SAML authentication and returns a token that can be used in subsequent web services calls.\n\n[Example PowerShell Code is available here](https://gist.github.com/infamousjoeg/b44faa299ec3de65bdd1d3b8474b0649)",
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "string",
                                "example": ""
                            },
                            "example": ""
                        }
                    }
                },
                "tags": [
                    "SAML Authentication"
                ]
            }
        },
        "/PasswordVault/api/auth/SAML/Logoff": {
            "post": {
                "summary": "Logoff",
                "description": "This method logs off the user and removes the Vault session. This web service is used to log off when the user authenticated with SAML authentication.",
                "operationId": "Logoff",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{SAMLToken}}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "SAML Authentication"
                ]
            }
        },
        "/PasswordVault/API/Auth/CyberArk/Logon": {
            "post": {
                "summary": "Logon - CyberArk Authentication",
                "description": "This method authenticates a user to the Vault and returns a token that can be used in subsequent web services calls. In addition, this method enables you to set a new password.",
                "operationId": "Logon-CyberArkAuthentication",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "This method authenticates a user to the Vault and returns a token that can be used in subsequent web services calls. In addition, this method enables you to set a new password.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": "{\n\t\"username\": \"{{apiUsername}}\",\n\t\"password\": \"{{apiPassword}}\",\n\t//\"newPassword\": \"<optional>\",\n\t\"concurrentSession\": \"true\"\n}"
                            },
                            "example": "{\n\t\"username\": \"{{apiUsername}}\",\n\t\"password\": \"{{apiPassword}}\",\n\t//\"newPassword\": \"<optional>\",\n\t\"concurrentSession\": \"true\"\n}"
                        }
                    }
                },
                "tags": [
                    "SAML Authentication"
                ]
            }
        },
        "/PasswordVault/API/Auth/LDAP/Logon": {
            "post": {
                "summary": "Logon - LDAP Authentication",
                "description": "This method authenticates a user to the Vault and returns a token that can be used in subsequent web services calls. In addition, this method enables you to set a new password.",
                "operationId": "Logon-LDAPAuthentication",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "This method authenticates a user to the Vault and returns a token that can be used in subsequent web services calls. In addition, this method enables you to set a new password.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": "{\n\t\"username\": \"{{apiUsername}}\",\n\t\"password\": \"{{apiPassword}}\",\n\t//\"newPassword\": \"<optional>\",\n\t\"concurrentSession\": \"true\"\n}"
                            },
                            "example": "{\n\t\"username\": \"{{apiUsername}}\",\n\t\"password\": \"{{apiPassword}}\",\n\t//\"newPassword\": \"<optional>\",\n\t\"concurrentSession\": \"true\"\n}"
                        }
                    }
                },
                "tags": [
                    "SAML Authentication"
                ]
            }
        },
        "/PasswordVault/API/Auth/radius/Logon": {
            "post": {
                "summary": "Logon - RADIUS Authentication",
                "description": "This method authenticates a user to the Vault and returns a token that can be used in subsequent web services calls. In addition, this method enables you to set a new password.",
                "operationId": "Logon-RADIUSAuthentication",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "This method authenticates a user to the Vault and returns a token that can be used in subsequent web services calls. In addition, this method enables you to set a new password.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "Username": "{{apiUsername}}",
                                    "Password": "{{apiPassword}}",
                                    "concurrentSessions": "true"
                                }
                            },
                            "example": "{\n\t\"Username\": \"{{apiUsername}}\",\n\t\"Password\": \"{{apiPassword}}\",\n\t\"concurrentSessions\": \"true\"\n}"
                        }
                    }
                },
                "tags": [
                    "SAML Authentication"
                ]
            }
        },
        "/PasswordVault/API/auth/Windows/Logon": {
            "post": {
                "summary": "Logon - Windows Authentication",
                "description": "This method authenticates a user to the Vault and returns a token that can be used in subsequent web services calls. In addition, this method enables you to set a new password.",
                "operationId": "Logon-WindowsAuthentication",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method authenticates a user to the Vault and returns a token that can be used in subsequent web services calls. In addition, this method enables you to set a new password.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "username": "{{apiUsername}}",
                                    "password": "{{apiPassword}}",
                                    "concurrentSessions": "false"
                                }
                            },
                            "example": "{\n\t\"username\": \"{{apiUsername}}\",\n\t\"password\": \"{{apiPassword}}\",\n\t\"concurrentSessions\": \"false\"\n}"
                        }
                    }
                },
                "tags": [
                    "SAML Authentication"
                ]
            }
        },
        "/PasswordVault/API/Auth/Logoff": {
            "post": {
                "summary": "Logoff",
                "description": "This method logs off the user and removes the Vault session.",
                "operationId": "Logoff5",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "LogoffUrl": ""
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "This method logs off the user and removes the Vault session.",
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {}
                            },
                            "example": []
                        }
                    }
                },
                "tags": [
                    "SAML Authentication"
                ]
            }
        },
        "/PasswordVault/WebServices/auth/Shared/RestfulAuthenticationService.svc/Logon": {
            "post": {
                "summary": "Logon",
                "description": "Shared authentication is based on a user credential file that is stored in the PVWA web server. During shared authentication, only the user defined in the credential file can log on to the PVWA, but multiple users can use the logon token.\n\nThis type of authentication **requires** the application using the REST services to manage the users as the Vault can't identify which specific user performs each action.\n\nMultiple concurrent connections can be created using the same token, without affecting each other.\n\nThe shared user is defined in a user credential file, whose location is specified in the WSCredentialFile parameter, in the appsettings section of the PVWAweb.config file:\n\n```\n<add key=\"WSCredentialFile\" value=\"C:\\CyberArk\\Password Vault Web Access\\CredFiles\\WSUser.ini\"/>\n```\n\n* Make sure that this user can access the PVWA interface.\n* Make sure the user only has the permissions in the Vault that they require.\n\nFor information about securing communication when using the SDK, refer to the following:\n\n* [Securing application-to-REST communication](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/SDK/Securing%20Communication.htm)\n* [Configuring client authentication via certificates](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/SDK/Configuring%20Client%20Authentication%20via%20Client%20Certificates.htm)\n\nThis method authenticates to the Vault with a shared webservices user and returns a token that will be used in subsequent web services calls.\n\nThis is supported for CyberArk authentication only, and not for third party authentication.",
                "operationId": "Logon0",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "Shared authentication is based on a user credential file that is stored in the PVWA web server. During shared authentication, only the user defined in the credential file can log on to the PVWA, but multiple users can use the logon token.\n\nThis type of authentication **requires** the application using the REST services to manage the users as the Vault can't identify which specific user performs each action.\n\nMultiple concurrent connections can be created using the same token, without affecting each other.\n\nThe shared user is defined in a user credential file, whose location is specified in the WSCredentialFile parameter, in the appsettings section of the PVWAweb.config file:\n\n```\n<add key=\"WSCredentialFile\" value=\"C:\\CyberArk\\Password Vault Web Access\\CredFiles\\WSUser.ini\"/>\n```\n\n* Make sure that this user can access the PVWA interface.\n* Make sure the user only has the permissions in the Vault that they require.\n\nFor information about securing communication when using the SDK, refer to the following:\n\n* [Securing application-to-REST communication](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/SDK/Securing%20Communication.htm)\n* [Configuring client authentication via certificates](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/SDK/Configuring%20Client%20Authentication%20via%20Client%20Certificates.htm)\n\nThis method authenticates to the Vault with a shared webservices user and returns a token that will be used in subsequent web services calls.\n\nThis is supported for CyberArk authentication only, and not for third party authentication.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": ""
                            },
                            "example": ""
                        }
                    }
                },
                "tags": [
                    "Shared Logon Authentication"
                ]
            }
        },
        "/PasswordVault/WebServices/auth/Shared/RestfulAuthenticationService.svc/Logoff": {
            "post": {
                "summary": "Logoff",
                "description": "This method logs off the shared user and removes the Vault session.",
                "operationId": "Logoff1",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Shared Logon Authentication"
                ]
            }
        },
        "/PasswordVault/api/Configuration/OIDC/Providers": {
            "get": {
                "summary": "Get All OpenID Connect Identity Providers",
                "description": "This method returns a list of all OIDC Identity Providers. Any user who is a member of the Vault admins group can run this web service.",
                "operationId": "GetAllOpenIDConnectIdentityProviders",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "OpenID Connect Identity Provider"
                ]
            },
            "post": {
                "summary": "Add OpenID Connect Identity Provider",
                "description": "This method creates an OpenID Connect (OIDC) Identity Provider in the Vault. Any user who is a member of the Vault admins group can run this web service.\n\n**NOTE:** This API must be used with the Add authentication method API in order to have a complete authentication configuration.\n\nWhen you add an OIDC Identity Provider, you must also add the provider to the list of authentication methods using the same ID, and add the provider's base URL to the access restriction list by using the following APIs:\n\n* Add authentication method\n* Add allowed referrer",
                "operationId": "AddOpenIDConnectIdentityProvider",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method creates an OpenID Connect (OIDC) Identity Provider in the Vault. Any user who is a member of the Vault admins group can run this web service.\n\n**NOTE:** This API must be used with the Add authentication method API in order to have a complete authentication configuration.\n\nWhen you add an OIDC Identity Provider, you must also add the provider to the list of authentication methods using the same ID, and add the provider's base URL to the access restriction list by using the following APIs:\n\n* Add authentication method\n* Add allowed referrer",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "id": "opserver",
                                    "authenticationFlow": "Code",
                                    "discoveryEndpointUrl": "https://Domain.com/OPServer/.well-known/openid-configuration",
                                    "clientId": "pvwa",
                                    "clientSecret": "secret",
                                    "clientSecretMethod": "basic"
                                }
                            },
                            "example": "{\n    \"id\": \"opserver\",\n    \"authenticationFlow\": \"Code\",\n    \"discoveryEndpointUrl\": \"https://Domain.com/OPServer/.well-known/openid-configuration\",\n    \"clientId\": \"pvwa\",\n    \"clientSecret\": \"secret\",\n    \"clientSecretMethod\": \"basic\"\n}"
                        }
                    }
                },
                "tags": [
                    "OpenID Connect Identity Provider"
                ]
            }
        },
        "/PasswordVault/api/Configuration/OIDC/Providers/{authID}": {
            "get": {
                "summary": "Get Specific OpenID Connect Identity Provider",
                "description": "This method returns a specific OIDC Identity Provider. Any user who is a member of the Vault admins group can run this web service.",
                "operationId": "GetSpecificOpenIDConnectIdentityProvider",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/authID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "OpenID Connect Identity Provider"
                ]
            },
            "put": {
                "summary": "Update OpenID Connect Identity Provider",
                "description": "This method updates an existing OIDC Identity Provider. Any user who is a member of the Vault admins group can run this web service.",
                "operationId": "UpdateOpenIDConnectIdentityProvider",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "authID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "authID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method updates an existing OIDC Identity Provider. Any user who is a member of the Vault admins group can run this web service.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "authenticationFlow": "Code",
                                    "discoveryEndpointUrl": "https://10.10.22.121/OPServer/.well-known/openid-configuration",
                                    "clientId": "pvwa",
                                    "clientSecretMethod": "basic",
                                    "userNameClaim": "given_name"
                                }
                            },
                            "example": "{\n    \"authenticationFlow\": \"Code\",\n    \"discoveryEndpointUrl\": \"https://10.10.22.121/OPServer/.well-known/openid-configuration\",\n    \"clientId\": \"pvwa\",\n    \"clientSecretMethod\": \"basic\",\n    \"userNameClaim\": \"given_name\"\n}"
                        }
                    }
                },
                "tags": [
                    "OpenID Connect Identity Provider"
                ]
            },
            "delete": {
                "summary": "Delete OpenID Connect Identity Provider",
                "description": "This method deletes a specific OIDC Identity Provider. Any user who is a member of the Vault admins group can run this web service.\n\n**NOTE:** This API must be used with the Delete authentication method API in order to have a complete authentication configuration.\n\nFor example, when you delete an OIDC Identity provider, you must also delete the provider from the list of authentication methods using the same ID.",
                "operationId": "DeleteOpenIDConnectIdentityProvider",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "authID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "authID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "OpenID Connect Identity Provider"
                ]
            }
        },
        "/PasswordVault/api/Configuration/AuthenticationMethods": {
            "get": {
                "summary": "Get Authentication Methods",
                "description": "This method returns a list of all existing authentication methods. Any user who is a member of the Vault admins group can run this web service.",
                "operationId": "GetAuthenticationMethods",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "Methods": [
                                        {
                                            "id": "windows",
                                            "displayName": "",
                                            "enabled": false,
                                            "mobileEnabled": false,
                                            "logoffUrl": "",
                                            "secondFactorAuth": null,
                                            "signInLabel": "",
                                            "usernameFieldLabel": "",
                                            "passwordFieldLabel": ""
                                        },
                                        {
                                            "id": "pki",
                                            "displayName": "",
                                            "enabled": false,
                                            "mobileEnabled": false,
                                            "logoffUrl": "",
                                            "secondFactorAuth": null,
                                            "signInLabel": "",
                                            "usernameFieldLabel": "",
                                            "passwordFieldLabel": ""
                                        },
                                        {
                                            "id": "cyberark",
                                            "displayName": "",
                                            "enabled": true,
                                            "mobileEnabled": true,
                                            "logoffUrl": "",
                                            "secondFactorAuth": "cyberark",
                                            "signInLabel": "",
                                            "usernameFieldLabel": "",
                                            "passwordFieldLabel": ""
                                        },
                                        {
                                            "id": "oraclesso",
                                            "displayName": "",
                                            "enabled": false,
                                            "mobileEnabled": false,
                                            "logoffUrl": "http://[ssoserver]:7777/sso/logout?p_done_url=http://[iisserver]/PasswordVault",
                                            "secondFactorAuth": null,
                                            "signInLabel": "",
                                            "usernameFieldLabel": "",
                                            "passwordFieldLabel": ""
                                        },
                                        {
                                            "id": "rsa",
                                            "displayName": "",
                                            "enabled": false,
                                            "mobileEnabled": false,
                                            "logoffUrl": "/WebID/IISWebAgentIF.dll?logoff?referrer=/passwordvault",
                                            "secondFactorAuth": null,
                                            "signInLabel": "",
                                            "usernameFieldLabel": "",
                                            "passwordFieldLabel": ""
                                        },
                                        {
                                            "id": "radius",
                                            "displayName": "Duo (RADIUS)",
                                            "enabled": true,
                                            "mobileEnabled": true,
                                            "logoffUrl": "",
                                            "secondFactorAuth": "radius",
                                            "signInLabel": "",
                                            "usernameFieldLabel": "",
                                            "passwordFieldLabel": ""
                                        },
                                        {
                                            "id": "ldap",
                                            "displayName": "",
                                            "enabled": true,
                                            "mobileEnabled": true,
                                            "logoffUrl": "",
                                            "secondFactorAuth": null,
                                            "signInLabel": "",
                                            "usernameFieldLabel": "",
                                            "passwordFieldLabel": ""
                                        },
                                        {
                                            "id": "saml",
                                            "displayName": "IDaptive SAML",
                                            "enabled": true,
                                            "mobileEnabled": false,
                                            "logoffUrl": "https://tentantid.my.idaptive.app/applogout/appkey/acredacted/customerid/redacted",
                                            "secondFactorAuth": null,
                                            "signInLabel": "",
                                            "usernameFieldLabel": "",
                                            "passwordFieldLabel": ""
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "OpenID Connect Identity Provider"
                ]
            },
            "post": {
                "summary": "Add Authentication Method",
                "description": "This method adds a new authentication method. Any user who is a member of the Vault admins group can run this web service.",
                "operationId": "AddAuthenticationMethod",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method adds a new authentication method. Any user who is a member of the Vault admins group can run this web service.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "id": "saml",
                                    "displayName": "IDaptive SAML",
                                    "enabled": true,
                                    "mobileEnabled": false,
                                    "logoffUrl": "https://domain.com/idp/logoff",
                                    "secondFactorAuth": null,
                                    "signInLabel": "",
                                    "usernameFieldLabel": "",
                                    "passwordFieldLabel": ""
                                }
                            },
                            "example": "{\n    \"id\": \"saml\",\n    \"displayName\": \"IDaptive SAML\",\n    \"enabled\": true,\n    \"mobileEnabled\": false,\n    \"logoffUrl\": \"https://domain.com/idp/logoff\",\n    \"secondFactorAuth\": null,\n    \"signInLabel\": \"\",\n    \"usernameFieldLabel\": \"\",\n    \"passwordFieldLabel\": \"\"\n}"
                        }
                    }
                },
                "tags": [
                    "OpenID Connect Identity Provider"
                ]
            }
        },
        "/PasswordVault/api/Configuration/AuthenticationMethods/{authID}": {
            "get": {
                "summary": "Get Specific Authentication Method",
                "description": "This method returns a specific authentication method. Any user who is a member of the Vault Admins group can run this web service.",
                "operationId": "GetSpecificAuthenticationMethod",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "authID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "authID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "id": "saml",
                                    "displayName": "IDaptive SAML",
                                    "enabled": true,
                                    "mobileEnabled": false,
                                    "logoffUrl": "https://tenantid.my.idaptive.app/applogout/appkey/acredacted/customerid/redacted",
                                    "secondFactorAuth": null,
                                    "signInLabel": "",
                                    "usernameFieldLabel": "",
                                    "passwordFieldLabel": ""
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "OpenID Connect Identity Provider"
                ]
            },
            "put": {
                "summary": "Update Authentication Method",
                "description": "This method updates the properties for a specific authentication method. Any user who is a member of the Vault admins group can run this web service.",
                "operationId": "UpdateAuthenticationMethod",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "authID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "authID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method updates the properties for a specific authentication method. Any user who is a member of the Vault admins group can run this web service.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "displayName": "",
                                    "enabled": true,
                                    "mobileEnabled": false,
                                    "logoffUrl": "https://domain.com/idp/logoff",
                                    "secondFactorAuth": null,
                                    "signInLabel": "",
                                    "usernameFieldLabel": "",
                                    "passwordFieldLabel": ""
                                }
                            },
                            "example": "{\n    \"displayName\": \"\",\n    \"enabled\": true,\n    \"mobileEnabled\": false,\n    \"logoffUrl\": \"https://domain.com/idp/logoff\",\n    \"secondFactorAuth\": null,\n    \"signInLabel\": \"\",\n    \"usernameFieldLabel\": \"\",\n    \"passwordFieldLabel\": \"\"\n}"
                        }
                    }
                },
                "tags": [
                    "OpenID Connect Identity Provider"
                ]
            },
            "delete": {
                "summary": "Delete Authentication Method",
                "description": "This method deletes a specific authentication method. Any user who is a member of the Vault admins group can run this web service.",
                "operationId": "DeleteAuthenticationMethod",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "authID",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "authID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "OpenID Connect Identity Provider"
                ]
            }
        },
        "/api/getauthtoken": {
            "post": {
                "summary": "PTA Authentication",
                "description": "This method enables a user to get a token upon Web application authentication. You can use this method to monitor the PTA system health, as shown in [Get PTA replication status](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/WebServices/PTA_System_Health.htm).",
                "operationId": "PTAAuthentication",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/x-www-form-urlencoded"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method enables a user to get a token upon Web application authentication. You can use this method to monitor the PTA system health, as shown in [Get PTA replication status](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/WebServices/PTA_System_Health.htm).",
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "username",
                                    "password"
                                ],
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "example": "{{apiUsername}}"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "{{apiPassword}}"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "OpenID Connect Identity Provider"
                ]
            }
        },
        "/passwordvault/api/platforms/targets": {
            "get": {
                "summary": "Get Target Platforms",
                "description": "This method allows users to retrieve basic information of all existing target platforms.\n\nYou can use filters to retrieve a subset of the target platforms or search for a specific target platform. For details, see [URL parameters](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/11.6/en/Content/SDK/rest-api-get-target-platforms.htm#URL%C2%A0para).",
                "operationId": "GetTargetPlatforms",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "Platforms": [
                                        {
                                            "Active": true,
                                            "SystemType": "*NIX",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer",
                                                "PSMServerName": "PSM Server on PASAAS-PSM"
                                            },
                                            "ID": 2,
                                            "PlatformID": "UnixSSH",
                                            "Name": "Unix via SSH"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "*NIX",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 23,
                                            "PlatformID": "UnixSSHKeys",
                                            "Name": "Unix via SSH Keys"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Application",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": false
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": false
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 35,
                                            "PlatformID": "ConjurHost",
                                            "Name": "Conjur Host"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Application",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": true,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": false
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 48,
                                            "PlatformID": "ConjurUser",
                                            "Name": "Conjur User"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Application",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": true,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": false
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 32,
                                            "PlatformID": "CyberArkPTA",
                                            "Name": "CyberArk PTA"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Application",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": false
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 9,
                                            "PlatformID": "CyberArk",
                                            "Name": "CyberArk Vault"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Application",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": true,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 28,
                                            "PlatformID": "RSAManagement",
                                            "Name": "RSA Authentication Manager"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Application",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 5,
                                            "PlatformID": "SAP",
                                            "Name": "SAP"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Cloud Service",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": false
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 25,
                                            "PlatformID": "AWS",
                                            "Name": "Amazon Web Services - AWS"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Cloud Service",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": false
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 26,
                                            "PlatformID": "AWSAccessKeys",
                                            "Name": "Amazon Web Services - AWS - Access Keys"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Cloud Service",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": true,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 30,
                                            "PlatformID": "AzurePasswordManagement",
                                            "Name": "Microsoft Azure Password Management"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Cloud Service",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": true,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 37,
                                            "PlatformID": "GCPServiceAccount",
                                            "Name": "Google Cloud Platfrom - Service Account"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Cloud Service",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": true,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 29,
                                            "PlatformID": "AzureApplicationKeys",
                                            "Name": "Microsoft Azure Application Keys Management"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Database",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 17,
                                            "PlatformID": "MySQL",
                                            "Name": "MySQL Server"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Database",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 15,
                                            "PlatformID": "DB2UnixSSH",
                                            "Name": "DB2 on Unix via SSH"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Database",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 16,
                                            "PlatformID": "InformixUnixSSH",
                                            "Name": "Informix on Unix via SSH"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Database",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 3,
                                            "PlatformID": "MSSql",
                                            "Name": "Microsoft SQL Server"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Database",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 8,
                                            "PlatformID": "Oracle",
                                            "Name": "Oracle Database"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Database",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": true,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 31,
                                            "PlatformID": "SAPHANA",
                                            "Name": "SAP HANA"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Database",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 4,
                                            "PlatformID": "Sybase",
                                            "Name": "Sybase ASE"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Directory",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 21,
                                            "PlatformID": "Novell-eDirectory",
                                            "Name": "Novell eDirectory server"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Directory",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 20,
                                            "PlatformID": "SunOneDirectorySSL",
                                            "Name": "SunOne directory via SSL"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Network Device",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 19,
                                            "PlatformID": "CiscoSSH",
                                            "Name": "Cisco router via SSH"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Operating System",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 12,
                                            "PlatformID": "as400",
                                            "Name": "AS400"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Operating System",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": false
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": false
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 13,
                                            "PlatformID": "OS390SSH",
                                            "Name": "OS390 via SSH"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Operating System",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 14,
                                            "PlatformID": "VMWareESX-API",
                                            "Name": "VMWare ESX Account API"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "PSM Secure Connect",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": false
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": false
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 22,
                                            "PlatformID": "PSMSecureConnect",
                                            "Name": "PSM Secure Connect"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Security Appliance",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": false
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 18,
                                            "PlatformID": "Firewall1",
                                            "Name": "Check Point FireWall-1"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Security Appliance",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 24,
                                            "PlatformID": "GAiASSH",
                                            "Name": "Check Point GAiA via SSH"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Website",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": true,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 42,
                                            "PlatformID": "DockerRegistry",
                                            "Name": "Docker Registry"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Website",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": true,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 38,
                                            "PlatformID": "GenericWebApp",
                                            "Name": "Generic Web App"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Website",
                                            "AllowedSafes": "BZ_I_*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": false
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": false
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 36,
                                            "PlatformID": "BusinessWebsite",
                                            "Name": "Business Website"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Windows",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": true,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": true,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": true,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": true,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 10,
                                            "PlatformID": "WinDesktopLocal",
                                            "Name": "Windows Desktop Local Accounts"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Windows",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": true,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": true,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": true,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": true,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer",
                                                "PSMServerName": "PSM Server on PASAAS-PSM"
                                            },
                                            "ID": 7,
                                            "PlatformID": "WinDomain",
                                            "Name": "Windows Domain Account"
                                        },
                                        {
                                            "Active": true,
                                            "SystemType": "Windows",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": true,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": true,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": true,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": true,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 6,
                                            "PlatformID": "WinServerLocal",
                                            "Name": "Windows Server Local Accounts"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Windows",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Change": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": true
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "ID": 11,
                                            "PlatformID": "WinLocalWMI",
                                            "Name": "Windows Local Accounts WMI"
                                        },
                                        {
                                            "Active": false,
                                            "SystemType": "Windows",
                                            "AllowedSafes": ".*",
                                            "PrivilegedAccessWorkflows": {
                                                "RequireDualControlPasswordAccessApproval": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceCheckinCheckoutExclusiveAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "EnforceOnetimePasswordAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                },
                                                "RequireUsersToSpecifyReasonForAccess": {
                                                    "IsActive": false,
                                                    "IsAnException": false
                                                }
                                            },
                                            "CredentialsManagementPolicy": {
                                                "Verification": {
                                                    "PerformAutomatic": false,
                                                    "RequirePasswordEveryXDays": 7,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": false
                                                },
                                                "Change": {
                                                    "PerformAutomatic": true,
                                                    "RequirePasswordEveryXDays": 90,
                                                    "AutoOnAdd": false,
                                                    "AllowManual": true
                                                },
                                                "Reconcile": {
                                                    "AutomaticReconcileWhenUnsynced": false,
                                                    "AllowManual": false
                                                },
                                                "SecretUpdateConfiguration": {
                                                    "ChangePasswordInResetMode": false
                                                }
                                            },
                                            "PrivilegedSessionManagement": {
                                                "PSMServerId": "PSMServer_a91999c",
                                                "PSMServerName": "PSM Server on PASAAS-PVWA"
                                            },
                                            "ID": 27,
                                            "PlatformID": "WinLooselyDevice",
                                            "Name": "Windows Loosely Device"
                                        }
                                    ],
                                    "Total": 37
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Target Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/targets/{PlatformName}/activate": {
            "post": {
                "summary": "Activate Target Platform",
                "description": "This method allows Vault Admins to activate a target platform.",
                "operationId": "ActivateTargetPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/PlatformName"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Target Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/targets/{PlatformName}/deactivate": {
            "post": {
                "summary": "Deactivate Target Platform",
                "description": "This method allows Vault Admins to deactivate a target platform.",
                "operationId": "DeactivateTargetPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Target Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/targets/{PlatformName}/duplicate": {
            "post": {
                "summary": "Duplicate Target Platforms",
                "description": "This method allows Vault Admins to duplicate target platforms.",
                "operationId": "DuplicateTargetPlatforms",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method allows Vault Admins to duplicate target platforms.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "Name": "test Platform",
                                    "Description": ""
                                }
                            },
                            "example": "{\n    \"Name\": \"test Platform\",\n    \"Description\": \"\"\n}"
                        }
                    }
                },
                "tags": [
                    "Target Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/targets/{PlatformName}": {
            "delete": {
                "summary": "Delete Target Platform",
                "description": "This method allows Vault Admins to delete a target platform.",
                "operationId": "DeleteTargetPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Target Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/dependents": {
            "get": {
                "summary": "Get Dependent Platforms",
                "description": "This method allows Vault Admins to retrieve basic information about all existing dependent platforms.",
                "operationId": "GetDependentPlatforms",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Platform Name"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Dependent Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/dependent/{PlatformName}/duplicate": {
            "post": {
                "summary": "Duplicate Dependent Platforms",
                "description": "This method allows Vault Admins to duplicate dependent platforms.",
                "operationId": "DuplicateDependentPlatforms",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method allows Vault Admins to duplicate dependent platforms.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "Name": "test Platform",
                                    "Description": ""
                                }
                            },
                            "example": "{\n    \"Name\": \"test Platform\",\n    \"Description\": \"\"\n}"
                        }
                    }
                },
                "tags": [
                    "Dependent Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/dependents/{PlatformName}": {
            "delete": {
                "summary": "Delete Dependent Platform",
                "description": "This method allows Vault Admins to delete a dependent platform.",
                "operationId": "DeleteDependentPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Dependent Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/groups": {
            "get": {
                "summary": "Get Group Platforms",
                "description": "This method allows Vault Admins to retrieve basic information about all existing group platforms.",
                "operationId": "GetGroupPlatforms",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "example": "SSH"
                        },
                        "description": "Platform Name"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "Platforms": [
                                        {
                                            "Active": false,
                                            "ID": 34,
                                            "PlatformID": "SampleSSHKeyGroup",
                                            "Name": "[Sample SSH Key Group Platform]"
                                        }
                                    ],
                                    "Total": 1
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Group Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/groups/{PlatformName}/activate": {
            "post": {
                "summary": "Activate Group Platform",
                "description": "This method allows Vault Admins to activate a group platform.",
                "operationId": "ActivateGroupPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Group Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/groups/{PlatformName}/deactivate": {
            "post": {
                "summary": "Deactivate Group Platform",
                "description": "This method allows Vault Admins to deactivate a group platform.",
                "operationId": "DeactivateGroupPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Group Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/groups/{PlatformName}/duplicate": {
            "post": {
                "summary": "Duplicate Group Platforms",
                "description": "This method allows Vault Admins to duplicate group platforms.",
                "operationId": "DuplicateGroupPlatforms",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method allows Vault Admins to duplicate group platforms.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "Name": "test Platform",
                                    "Description": ""
                                }
                            },
                            "example": "{\n    \"Name\": \"test Platform\",\n    \"Description\": \"\"\n}"
                        }
                    }
                },
                "tags": [
                    "Group Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/groups/{PlatformName}": {
            "delete": {
                "summary": "Delete Group Platform",
                "description": "This method allows Vault Admins to delete a group platform.",
                "operationId": "DeleteGroupPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Group Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/rotationalGroups": {
            "get": {
                "summary": "Get Rotational Group Platforms",
                "description": "This method allows Vault Admins to retrieve basic information about all existing rotational group platforms.",
                "operationId": "GetRotationalGroupPlatforms",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "example": "MySQL"
                        },
                        "description": "Platform Name"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "Platforms": [
                                        {
                                            "Active": true,
                                            "GracePeriod": 540,
                                            "ID": 40,
                                            "PlatformID": "MySQLServer-DualAccounts",
                                            "Name": "MySQL Server - Dual Accounts"
                                        }
                                    ],
                                    "Total": 1
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Rotational Group Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/rotationalGroups/{PlatformName}/activate": {
            "post": {
                "summary": "Activate Rotational Group Platform",
                "description": "This method allows Vault Admins to activate a rotational group platform.",
                "operationId": "ActivateRotationalGroupPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Rotational Group Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/rotationalGroups/{PlatformName}/deactivate": {
            "post": {
                "summary": "Deactivate Rotational Group Platform",
                "description": "This method allows Vault Admins to deactivate a rotational group platform.",
                "operationId": "DeactivateRotationalGroupPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Rotational Group Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/rotationalGroups/{PlatformName}/duplicate": {
            "post": {
                "summary": "Duplicate Rotational Group Platforms",
                "description": "This method allows Vault Admins to duplicate rotational group platforms.",
                "operationId": "DuplicateRotationalGroupPlatforms",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method allows Vault Admins to duplicate rotational group platforms.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "Name": "test Platform",
                                    "Description": ""
                                }
                            },
                            "example": "{\n    \"Name\": \"test Platform\",\n    \"Description\": \"\"\n}"
                        }
                    }
                },
                "tags": [
                    "Rotational Group Platforms"
                ]
            }
        },
        "/passwordvault/api/platforms/rotationalGroups/{PlatformName}": {
            "delete": {
                "summary": "Delete Rotational Group Platform",
                "description": "This method allows Vault Admins to delete a rotational group platform.",
                "operationId": "DeleteRotationalGroupPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Rotational Group Platforms"
                ]
            }
        },
        "/PasswordVault/API/Platforms/{PlatformName}": {
            "get": {
                "summary": "Get Platform Details",
                "description": "This method retrieves details of a specified platform from the Vault.",
                "operationId": "GetPlatformDetails",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "PlatformID": "WinDomain",
                                    "Details": {
                                        "PolicyID": "WinDomain",
                                        "PolicyName": "Windows Domain Account",
                                        "SearchForUsages": "Yes",
                                        "PolicyType": "regular",
                                        "ImmediateInterval": "5",
                                        "Interval": "1440",
                                        "MaxConcurrentConnections": "3",
                                        "AllowedSafes": ".*",
                                        "MinValidityPeriod": "60",
                                        "ResetOveridesMinValidity": "yes",
                                        "ResetOveridesTimeFrame": "yes",
                                        "Timeout": "30",
                                        "UnlockIfFail": "no",
                                        "UnrecoverableErrors": "2103,2105,2121",
                                        "MaximumRetries": "5",
                                        "MinDelayBetweenRetries": "90",
                                        "DllName": "PMWindows.dll",
                                        "XMLFile": "yes",
                                        "AllowManualChange": "Yes",
                                        "PerformPeriodicChange": "No",
                                        "HeadStartInterval": "5",
                                        "FromHour": "-1",
                                        "ToHour": "-1",
                                        "ChangeNotificationPeriod": "-1",
                                        "DaysNotifyPriorExpiration": "7",
                                        "VFAllowManualVerification": "Yes",
                                        "VFPerformPeriodicVerification": "No",
                                        "VFFromHour": "-1",
                                        "VFToHour": "-1",
                                        "RCAllowManualReconciliation": "Yes",
                                        "RCAutomaticReconcileWhenUnsynched": "No",
                                        "RCReconcileReasons": "2114,2115,2106,2101",
                                        "RCFromHour": "-1",
                                        "RCToHour": "-1",
                                        "NFNotifyPriorExpiration": "No",
                                        "NFPriorExpirationRecipients": "",
                                        "NFNotifyOnPasswordDisable": "Yes",
                                        "NFOnPasswordDisableRecipients": "",
                                        "NFNotifyOnVerificationErrors": "Yes",
                                        "NFOnVerificationErrorsRecipients": "",
                                        "NFNotifyOnPasswordUsed": "No",
                                        "NFOnPasswordUsedRecipients": "",
                                        "PasswordLength": "8",
                                        "MinUpperCase": "2",
                                        "MinLowerCase": "2",
                                        "MinDigit": "1",
                                        "MinSpecial": "1",
                                        "OneTimePassword": "False",
                                        "ExpirationPeriod": "90",
                                        "VFVerificationPeriod": "7",
                                        "PasswordLevelRequestTimeframe": "False"
                                    },
                                    "Active": true
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Rotational Group Platforms"
                ]
            }
        },
        "/PasswordVault/API/Platforms": {
            "get": {
                "summary": "Get Platforms",
                "description": "This method returns all existing account platforms from the Vault.\n\nYou can use filters to retrieve a subset of the platforms or search for a specific platform. For details, see URL parameters.\n\n**Note:** The [Get Platform Details](#585553e8-dea9-4617-9313-297aac8d7273) API, used to retrieve details for a specific platform, returns a different set of parameters.",
                "operationId": "GetPlatforms",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Active"
                    },
                    {
                        "$ref": "#/components/parameters/PlatformType"
                    },
                    {
                        "name": "PlatformName",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Searching according to the platform name."
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": [
                    "Rotational Group Platforms"
                ]
            }
        },
        "/PasswordVault/API/Platforms/{PlatformName}/Export": {
            "post": {
                "summary": "Export Platform",
                "description": "If testing this in the Postman application, click the \"Download\" button after receiving the zip file stream to download the ZIP file locally.",
                "operationId": "ExportPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/octet-stream": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Rotational Group Platforms"
                ]
            }
        },
        "/API/Platforms/Import": {
            "post": {
                "summary": "Import Platform",
                "description": "This method enables administrators to import new platforms and dependencies.",
                "operationId": "ImportPlatform",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method enables administrators to import new platforms and dependencies.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": "{\n\t\"ImportFile\": {zip file in the format of BASE 64 array}\n}"
                            },
                            "example": "{\n\t\"ImportFile\": {zip file in the format of BASE 64 array}\n}"
                        }
                    }
                },
                "tags": [
                    "Rotational Group Platforms"
                ]
            }
        },
        "/PasswordVault/api/Safes": {
            "get": {
                "summary": "Get All Safes",
                "description": "This method returns a list of all Safes in the Vault that the user has permissions for. To run this web user, the user must be a member of the Safes in the Vault that are returned in the list.",
                "operationId": "GetAllSafes",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "example": "searchWord"
                        },
                        "description": "Searches according to the Safe name. Search is performed according to the REST standard (search=\"search word\")."
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Offset of the first Safe that is returned in the collection of results."
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        },
                        "description": "The maximum number of Safes that are returned. When used together with the offset parameter, this value determines the number of Safes to return, starting from the first Safe that is returned."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "example": "safeName asc"
                        },
                        "description": "Sorts according to the safeName property in ascending order (default) or descending order to control the sort direction."
                    },
                    {
                        "$ref": "#/components/parameters/includeAccounts"
                    },
                    {
                        "$ref": "#/components/parameters/extendedDetails"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "GetSafesResult": [
                                        {
                                            "Description": null,
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "AccountsFeedADAccounts"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "AccountsFeedDiscoveryLogs"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "D-CYBR-RESTAPI-ACCTS"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "D-LIN-ADMIN-USERS"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "D-LIN-ROOT-SSHKEYS"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "D-MYSQL-LOCAL-USERS"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "D-QUALYS-ACCTS"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "D-TENABLE-ACCTS"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "D-TEST-SAFE"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "Notification Engine"
                                        },
                                        {
                                            "Description": "",
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 5,
                                            "OLACEnabled": false,
                                            "SafeName": "P-WIN-LOCAL-ADMIN"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PasswordManager"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PasswordManager_Info"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PasswordManager_Pending"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PasswordManagerNG"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PasswordManagerNG_Info"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "PasswordManagerNG",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PasswordManagerShared"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PSMPADBridgeCustom"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": true,
                                            "SafeName": "PSMPADBUserProfile"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PSMUniversalConnectors"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": true,
                                            "SafeName": "PSMUnmanagedSessionAccounts"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PVWAConfig"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PVWAPublicData"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": true,
                                            "SafeName": "PVWAReports"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": true,
                                            "SafeName": "PVWATaskDefinitions"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PVWATicketingSystem"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "PVWAUserPrefs"
                                        },
                                        {
                                            "Description": null,
                                            "ManagingCPM": "",
                                            "NumberOfDaysRetention": null,
                                            "NumberOfVersionsRetention": 0,
                                            "OLACEnabled": false,
                                            "SafeName": "VaultInternal"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": []
            },
            "post": {
                "summary": "Add Safe",
                "description": "This method adds a new Safe to the Vault.\n\nThe user who runs this web service requires **Add Safes** permissions in the Vault.",
                "operationId": "AddSafe",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method adds a new Safe to the Vault.\n\nThe user who runs this web service requires **Add Safes** permissions in the Vault.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "SafeName": "testSafe1",
                                    "Description": "Desc1",
                                    "OLACEnabled": false,
                                    "ManagingCPM": "PasswordManager",
                                    "NumberOfVersionsRetention": null,
                                    "NumberOfDaysRetention": 0,
                                    "AutoPurgeEnabled": false,
                                    "Location": "\\"
                                }
                            },
                            "example": "{\n    \"SafeName\": \"testSafe1\",\n    \"Description\": \"Desc1\",\n    \"OLACEnabled\": false,\n    \"ManagingCPM\": \"PasswordManager\",\n    \"NumberOfVersionsRetention\": null,\n    \"NumberOfDaysRetention\": 0,\n    \"AutoPurgeEnabled\": false,\n    \"Location\": \"\\\\\"\n}"
                        }
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/api/Platforms/{PlatformName}/Safes": {
            "get": {
                "summary": "Get Safe by Platform ID",
                "description": "This method returns all the safes according to the platform ID.",
                "operationId": "GetSafebyPlatformID",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "PlatformName",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "PlatformName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "value": [
                                        "ConjurSync",
                                        "D-Nix-Root",
                                        "D-Win-DomainAdmins",
                                        "D-Win-LocalAdmins",
                                        "DemoSafe",
                                        "Notification Engine",
                                        "PasswordManager",
                                        "PasswordManagerShared",
                                        "PSM",
                                        "PSMUniversalConnectors",
                                        "PSMUnmanagedSessionAccounts",
                                        "PVWAPublicData",
                                        "PVWATicketingSystem",
                                        "ResponseManager",
                                        "TelemetryConfig",
                                        "Test1234",
                                        "VaultInternal"
                                    ],
                                    "count": 17
                                }
                            }
                        }
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/api/Safes/{Safe}": {
            "get": {
                "summary": "Get Safe Details",
                "description": "This method returns information about a specific Safe in the Vault.",
                "operationId": "GetSafeDetails",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "Safe",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "Safe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "example": {
                                    "GetSafeResult": {
                                        "Description": "",
                                        "ManagingCPM": "PasswordManagerNG",
                                        "NumberOfDaysRetention": null,
                                        "NumberOfVersionsRetention": 5,
                                        "OLACEnabled": false,
                                        "SafeName": "P-WIN-LOCAL-ADMIN"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": []
            },
            "delete": {
                "summary": "Delete Safe",
                "description": "This method deletes a Safe from the Vault.\n\nThe user who runs this web service requires **Manage Safe** permissions on the required Safe.",
                "operationId": "DeleteSafe",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "Safe",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "Safe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/API/Safes/{Safe}/AccountGroups": {
            "get": {
                "summary": "Get Safe Account Groups",
                "description": "This method returns all the existing account groups in a specific Safe. The user performing this task must have the following permissions in the Safe:\n\n* Add accounts\n* Update account content\n* Update account properties\n* Create folders",
                "operationId": "GetSafeAccountGroups",
                "parameters": [
                    {
                        "name": "Safe",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "Safe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": []
            }
        },
        "/PasswordVault/api/Safes/{Safe}/Members": {
            "get": {
                "summary": "Get Safe Members",
                "description": "This method returns a list of the members of a Safe. To run this web service, the user must have **ViewSafeMembers** permissions in the Safe.",
                "operationId": "GetSafeMembers",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "example": "memberType eq user AND membershipExpired eq false AND includePreDefinedUsers eq false"
                        },
                        "description": "Filters are according to the REST standard. Search for Safe members using the following filters. Multiple filters can be applied using the AND operator. memberType, membershipExpired, includePreDefinedUsers"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "example": "searchWord"
                        },
                        "description": "Searches according to the Safe name. Search is performed according to the REST standard (search=\"search word\")."
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Offset of the first member that is returned in the collection of results."
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        },
                        "description": "The maximum number of members that are returned. When used together with the offset parameter, this value determines the number of Safes to return, starting from the first Safe that is returned."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "example": "asc"
                        },
                        "description": "Sorts according to the memberName property in ascending order (default) or descending order to control the sort direction."
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "Safe",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "Safe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "tags": []
            },
            "post": {
                "summary": "Add Safe Member",
                "description": "This method adds an existing user or group as a Safe member.\n\nThe user who runs this web service requires the following permissions in the Vault:\n\n* Manage Safe Members",
                "operationId": "AddSafeMember",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "{{CyberArkLogonResult}}"
                        },
                        "description": "Session Authorization Token"
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "Safe",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string",
                            "example": "Safe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {}
                    }
                },
                "requestBody": {
                    "description": "This method adds an existing user or group as a Safe member.\n\nThe user who runs this web service requires the following permissions in the Vault:\n\n* Manage Safe Members",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "example": {
                                    "memberName": "JonDoe",
                                    "searchIn": "Vault",
                                    "membershipExpirationDate": 123456,
                                    "permissions": {
                                        "useAccounts": false,
                                        "retrieveAccounts": false,
                                        "listAccounts": false,
                                        "addAccounts": false,
                                        "updateAccountContent": false,
                                        "updateAccountProperties": false,
                                        "initiateCPMAccountManagementOperations": false,
                                        "specifyNextAccountContent": false,
                                        "renameAccounts": false,
                                        "deleteAccounts": false,
                                        "unlockAccounts": false,
                                        "manageSafe": false,
                                        "manageSafeMembers": false,
                                        "backupSafe": false,
                                        "viewAuditLog": false,
                                        "viewSafeMembers": false,
                                        "accessWithoutConfirmation": false,
                                        "createFolders": false,
                                        "deleteFolders": false,
                                        "moveAccountsAndFolders": false,
                                        "requestsAuthorizationLevel1": false,
                                        "requestsAuthorizationLevel2": false
                                    }
                                }
                            },
                            "example": "{\n    \"memberName\": \"JonDoe\",\n    \"searchIn\": \"Vault\",\n    \"membershipExpirationDate\": 123456,\n    \"permissions\": {\n        \"useAccounts\": false,\n        \"retrieveAccounts\": false,\n        \"listAccounts\": false,\n        \"addAccounts\": false,\n        \"updateAccountContent\": false,\n        \"updateAccountProperties\": false,\n        \"initiateCPMAccountManagementOperations\": false,\n        \"specifyNextAccountContent\": false,\n        \"renameAccounts\": false,\n        \"deleteAccounts\": false,\n        \"unlockAccounts\": false,\n        \"manageSafe\": false,\n        \"manageSafeMembers\": false,\n        \"backupSafe\": false,\n        \"viewAuditLog\": false,\n        \"viewSafeMembers\": false,\n        \"accessWithoutConfirmation\": false,\n        \"createFolders\": false,\n        \"deleteFolders\": false,\n        \"moveAccountsAndFolders\": false,\n        \"requestsAuthorizationLevel1\": false,\n        \"requestsAuthorizationLevel2\": false\n    }\n}"
                        }
                    }
                },
                "tags": []
            }
        }
    },
    "components": {
        "parameters": {
            "Authorization": {
                "name": "Authorization",
                "in": "header",
                "required": true,
                "style": "simple",
                "schema": {
                    "type": "string",
                    "example": "{{CyberArkLogonResult}}"
                },
                "description": "Session Authorization Token"
            },
            "Content-Type": {
                "name": "Content-Type",
                "in": "header",
                "required": true,
                "style": "simple",
                "schema": {
                    "type": "string",
                    "example": "application/json"
                }
            },
            "AccountID": {
                "name": "AccountID",
                "in": "path",
                "required": true,
                "style": "simple",
                "schema": {
                    "type": "string",
                    "example": "AccountID"
                }
            },
            "search": {
                "name": "search",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "DemoUser"
                },
                "description": "List of keywords to search for in accounts, separated by a space."
            },
            "searchType": {
                "name": "searchType",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "contains"
                },
                "description": "Get accounts that either contain or start with the value specified in the Search parameter. Valid values: contains (default) or startswith."
            },
            "sort": {
                "name": "sort",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "UserName"
                },
                "description": "Property or properties by which to sort returned accounts, followed by asc (default) or desc to control sort direction. Separate multiple properties with commas, up to a maximum of three properties."
            },
            "offset": {
                "name": "offset",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "number"
                },
                "description": "Offset of the first account that is returned in the collection of results."
            },
            "limit": {
                "name": "limit",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "number"
                },
                "description": "Maximum number of returned accounts. If not specified, the default value is 50. The maximum number that can be specified is 1000."
            },
            "filter": {
                "name": "filter",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "safeName eq {{Safe}}"
                },
                "description": "Get accounts from a specific safe, using the safe name."
            },
            "Accept": {
                "name": "Accept",
                "in": "header",
                "required": true,
                "style": "simple",
                "schema": {
                    "type": "string",
                    "example": "RDP"
                }
            },
            "Safe": {
                "name": "Safe",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "{{Safe}}"
                }
            },
            "GroupName": {
                "name": "GroupName",
                "in": "path",
                "required": true,
                "style": "simple",
                "schema": {
                    "type": "string",
                    "example": "GroupName"
                }
            },
            "BulkID": {
                "name": "BulkID",
                "in": "path",
                "required": true,
                "style": "simple",
                "schema": {
                    "type": "string",
                    "example": "BulkID"
                }
            },
            "concurrentSession": {
                "name": "concurrentSession",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "true"
                },
                "description": "Boolean value"
            },
            "apiUse": {
                "name": "apiUse",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "true"
                },
                "description": "Never should be false"
            },
            "SAMLResponse": {
                "name": "SAMLResponse",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "{{SAMLToken}}"
                },
                "description": "The SAML Token returned from your IdP"
            },
            "authID": {
                "name": "authID",
                "in": "path",
                "required": true,
                "style": "simple",
                "schema": {
                    "type": "string",
                    "example": "authID"
                }
            },
            "PlatformName": {
                "name": "PlatformName",
                "in": "path",
                "required": true,
                "style": "simple",
                "schema": {
                    "type": "string",
                    "example": "PlatformName"
                }
            },
            "Active": {
                "name": "Active",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "true"
                },
                "description": "Filter according to whether the platform is active or not. Valid values: true or false"
            },
            "PlatformType": {
                "name": "PlatformType",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "Regular"
                },
                "description": "Filter according to the platform type. Valid values: Group or Regular"
            },
            "includeAccounts": {
                "name": "includeAccounts",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "false"
                },
                "description": "Whether or not to return accounts for each Safe as part of the response. If not sent, the value is False."
            },
            "extendedDetails": {
                "name": "extendedDetails",
                "in": "query",
                "required": true,
                "style": "form",
                "schema": {
                    "type": "string",
                    "example": "true"
                },
                "description": "Whether or not to return all Safe details or only safeName as part of the response. If not sent, the value is True."
            }
        },
        "schemas": {
            "200": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "",
                        "default": "24_3"
                    },
                    "name": {
                        "type": "string",
                        "description": "",
                        "default": "ANSIBLE-RESTAPI-USER"
                    },
                    "address": {
                        "type": "string",
                        "description": "",
                        "default": "192.168.3.101"
                    },
                    "userName": {
                        "type": "string",
                        "description": "",
                        "default": "Svc_AnsibleREST"
                    },
                    "platformId": {
                        "type": "string",
                        "description": "",
                        "default": "JG-CyberArkVault"
                    },
                    "safeName": {
                        "type": "string",
                        "description": "",
                        "default": "D-CYBR-RESTAPI-ACCTS"
                    },
                    "secretType": {
                        "type": "string",
                        "description": "",
                        "default": "password"
                    },
                    "secretManagement": {
                        "type": "object",
                        "properties": {
                            "automaticManagementEnabled": {
                                "type": "boolean",
                                "description": "",
                                "default": true
                            },
                            "status": {
                                "type": "string",
                                "description": "",
                                "default": "success"
                            },
                            "lastModifiedTime": {
                                "type": "integer",
                                "description": "",
                                "default": 1541876282
                            }
                        }
                    },
                    "createdTime": {
                        "type": "integer",
                        "description": "",
                        "default": 1541876282
                    }
                }
            },
            "201": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "",
                        "default": "29_7"
                    },
                    "name": {
                        "type": "string",
                        "description": "",
                        "default": "Database-MySQL-db2.joegarcia.dev-cluster02sqluser01"
                    },
                    "address": {
                        "type": "string",
                        "description": "",
                        "default": "db2.joegarcia.dev"
                    },
                    "userName": {
                        "type": "string",
                        "description": "",
                        "default": "cluster02sqluser01"
                    },
                    "platformId": {
                        "type": "string",
                        "description": "",
                        "default": "MySQLServer-DualAccounts"
                    },
                    "safeName": {
                        "type": "string",
                        "description": "",
                        "default": "D-MySQL-Users"
                    },
                    "secretType": {
                        "type": "string",
                        "description": "",
                        "default": "password"
                    },
                    "platformAccountProperties": {
                        "type": "object",
                        "properties": {
                            "Index": {
                                "type": "string",
                                "description": "",
                                "default": "1"
                            },
                            "DualAccountStatus": {
                                "type": "string",
                                "description": "",
                                "default": "Active"
                            },
                            "VirtualUsername": {
                                "type": "string",
                                "description": "",
                                "default": "cluster02sqluser"
                            }
                        }
                    },
                    "secretManagement": {
                        "type": "object",
                        "properties": {
                            "automaticManagementEnabled": {},
                            "manualManagementReason": {
                                "type": "string",
                                "description": "",
                                "default": "testing"
                            },
                            "lastModifiedTime": {
                                "type": "integer",
                                "description": "",
                                "default": 1581084295
                            }
                        }
                    },
                    "createdTime": {
                        "type": "integer",
                        "description": "",
                        "default": 1581084295
                    }
                }
            }
        }
    },
    "security": [],
    "tags": [],
    "externalDocs": {
        "url": "",
        "description": ""
    }
}