/*
CyberArkIAG

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 18a45ad8-77e8-4ecc-873e-787c6de10a60
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// GroupPlatformsApiService GroupPlatformsApi service
type GroupPlatformsApiService service

type ApiActivateGroupPlatformRequest struct {
	ctx _context.Context
	ApiService *GroupPlatformsApiService
	authorization *string
	contentType *string
	platformName string
}

// Session Authorization Token
func (r ApiActivateGroupPlatformRequest) Authorization(authorization string) ApiActivateGroupPlatformRequest {
	r.authorization = &authorization
	return r
}
func (r ApiActivateGroupPlatformRequest) ContentType(contentType string) ApiActivateGroupPlatformRequest {
	r.contentType = &contentType
	return r
}

func (r ApiActivateGroupPlatformRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ActivateGroupPlatformExecute(r)
}

/*
ActivateGroupPlatform Activate Group Platform

This method allows Vault Admins to activate a group platform.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiActivateGroupPlatformRequest
*/
func (a *GroupPlatformsApiService) ActivateGroupPlatform(ctx _context.Context, platformName string) ApiActivateGroupPlatformRequest {
	return ApiActivateGroupPlatformRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *GroupPlatformsApiService) ActivateGroupPlatformExecute(r ApiActivateGroupPlatformRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupPlatformsApiService.ActivateGroupPlatform")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/groups/{PlatformName}/activate"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeactivateGroupPlatformRequest struct {
	ctx _context.Context
	ApiService *GroupPlatformsApiService
	authorization *string
	contentType *string
	platformName string
}

// Session Authorization Token
func (r ApiDeactivateGroupPlatformRequest) Authorization(authorization string) ApiDeactivateGroupPlatformRequest {
	r.authorization = &authorization
	return r
}
func (r ApiDeactivateGroupPlatformRequest) ContentType(contentType string) ApiDeactivateGroupPlatformRequest {
	r.contentType = &contentType
	return r
}

func (r ApiDeactivateGroupPlatformRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeactivateGroupPlatformExecute(r)
}

/*
DeactivateGroupPlatform Deactivate Group Platform

This method allows Vault Admins to deactivate a group platform.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiDeactivateGroupPlatformRequest
*/
func (a *GroupPlatformsApiService) DeactivateGroupPlatform(ctx _context.Context, platformName string) ApiDeactivateGroupPlatformRequest {
	return ApiDeactivateGroupPlatformRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *GroupPlatformsApiService) DeactivateGroupPlatformExecute(r ApiDeactivateGroupPlatformRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupPlatformsApiService.DeactivateGroupPlatform")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/groups/{PlatformName}/deactivate"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteGroupPlatformRequest struct {
	ctx _context.Context
	ApiService *GroupPlatformsApiService
	authorization *string
	contentType *string
	platformName string
}

// Session Authorization Token
func (r ApiDeleteGroupPlatformRequest) Authorization(authorization string) ApiDeleteGroupPlatformRequest {
	r.authorization = &authorization
	return r
}
func (r ApiDeleteGroupPlatformRequest) ContentType(contentType string) ApiDeleteGroupPlatformRequest {
	r.contentType = &contentType
	return r
}

func (r ApiDeleteGroupPlatformRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteGroupPlatformExecute(r)
}

/*
DeleteGroupPlatform Delete Group Platform

This method allows Vault Admins to delete a group platform.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiDeleteGroupPlatformRequest
*/
func (a *GroupPlatformsApiService) DeleteGroupPlatform(ctx _context.Context, platformName string) ApiDeleteGroupPlatformRequest {
	return ApiDeleteGroupPlatformRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *GroupPlatformsApiService) DeleteGroupPlatformExecute(r ApiDeleteGroupPlatformRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupPlatformsApiService.DeleteGroupPlatform")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/groups/{PlatformName}"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDuplicateGroupPlatformsRequest struct {
	ctx _context.Context
	ApiService *GroupPlatformsApiService
	authorization *string
	contentType *string
	platformName string
	body *string
}

// Session Authorization Token
func (r ApiDuplicateGroupPlatformsRequest) Authorization(authorization string) ApiDuplicateGroupPlatformsRequest {
	r.authorization = &authorization
	return r
}
func (r ApiDuplicateGroupPlatformsRequest) ContentType(contentType string) ApiDuplicateGroupPlatformsRequest {
	r.contentType = &contentType
	return r
}
// This method allows Vault Admins to duplicate group platforms.
func (r ApiDuplicateGroupPlatformsRequest) Body(body string) ApiDuplicateGroupPlatformsRequest {
	r.body = &body
	return r
}

func (r ApiDuplicateGroupPlatformsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DuplicateGroupPlatformsExecute(r)
}

/*
DuplicateGroupPlatforms Duplicate Group Platforms

This method allows Vault Admins to duplicate group platforms.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiDuplicateGroupPlatformsRequest
*/
func (a *GroupPlatformsApiService) DuplicateGroupPlatforms(ctx _context.Context, platformName string) ApiDuplicateGroupPlatformsRequest {
	return ApiDuplicateGroupPlatformsRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *GroupPlatformsApiService) DuplicateGroupPlatformsExecute(r ApiDuplicateGroupPlatformsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupPlatformsApiService.DuplicateGroupPlatforms")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/groups/{PlatformName}/duplicate"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetGroupPlatformsRequest struct {
	ctx _context.Context
	ApiService *GroupPlatformsApiService
	search *string
	authorization *string
	contentType *string
}

// Platform Name
func (r ApiGetGroupPlatformsRequest) Search(search string) ApiGetGroupPlatformsRequest {
	r.search = &search
	return r
}
// Session Authorization Token
func (r ApiGetGroupPlatformsRequest) Authorization(authorization string) ApiGetGroupPlatformsRequest {
	r.authorization = &authorization
	return r
}
func (r ApiGetGroupPlatformsRequest) ContentType(contentType string) ApiGetGroupPlatformsRequest {
	r.contentType = &contentType
	return r
}

func (r ApiGetGroupPlatformsRequest) Execute() (Model200, *_nethttp.Response, error) {
	return r.ApiService.GetGroupPlatformsExecute(r)
}

/*
GetGroupPlatforms Get Group Platforms

This method allows Vault Admins to retrieve basic information about all existing group platforms.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetGroupPlatformsRequest
*/
func (a *GroupPlatformsApiService) GetGroupPlatforms(ctx _context.Context) ApiGetGroupPlatformsRequest {
	return ApiGetGroupPlatformsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Model200
func (a *GroupPlatformsApiService) GetGroupPlatformsExecute(r ApiGetGroupPlatformsRequest) (Model200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Model200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupPlatformsApiService.GetGroupPlatforms")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.search == nil {
		return localVarReturnValue, nil, reportError("search is required and must be specified")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return localVarReturnValue, nil, reportError("contentType is required and must be specified")
	}

	localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
