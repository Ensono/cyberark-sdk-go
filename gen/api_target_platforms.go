/*
CyberArkIAG

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 18a45ad8-77e8-4ecc-873e-787c6de10a60
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// TargetPlatformsApiService TargetPlatformsApi service
type TargetPlatformsApiService service

type ApiActivateTargetPlatformRequest struct {
	ctx _context.Context
	ApiService *TargetPlatformsApiService
	authorization *string
	contentType *string
	platformName string
}

// Session Authorization Token
func (r ApiActivateTargetPlatformRequest) Authorization(authorization string) ApiActivateTargetPlatformRequest {
	r.authorization = &authorization
	return r
}
func (r ApiActivateTargetPlatformRequest) ContentType(contentType string) ApiActivateTargetPlatformRequest {
	r.contentType = &contentType
	return r
}

func (r ApiActivateTargetPlatformRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ActivateTargetPlatformExecute(r)
}

/*
ActivateTargetPlatform Activate Target Platform

This method allows Vault Admins to activate a target platform.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiActivateTargetPlatformRequest
*/
func (a *TargetPlatformsApiService) ActivateTargetPlatform(ctx _context.Context, platformName string) ApiActivateTargetPlatformRequest {
	return ApiActivateTargetPlatformRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *TargetPlatformsApiService) ActivateTargetPlatformExecute(r ApiActivateTargetPlatformRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetPlatformsApiService.ActivateTargetPlatform")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/targets/{PlatformName}/activate"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeactivateTargetPlatformRequest struct {
	ctx _context.Context
	ApiService *TargetPlatformsApiService
	authorization *string
	contentType *string
	platformName string
}

// Session Authorization Token
func (r ApiDeactivateTargetPlatformRequest) Authorization(authorization string) ApiDeactivateTargetPlatformRequest {
	r.authorization = &authorization
	return r
}
func (r ApiDeactivateTargetPlatformRequest) ContentType(contentType string) ApiDeactivateTargetPlatformRequest {
	r.contentType = &contentType
	return r
}

func (r ApiDeactivateTargetPlatformRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeactivateTargetPlatformExecute(r)
}

/*
DeactivateTargetPlatform Deactivate Target Platform

This method allows Vault Admins to deactivate a target platform.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiDeactivateTargetPlatformRequest
*/
func (a *TargetPlatformsApiService) DeactivateTargetPlatform(ctx _context.Context, platformName string) ApiDeactivateTargetPlatformRequest {
	return ApiDeactivateTargetPlatformRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *TargetPlatformsApiService) DeactivateTargetPlatformExecute(r ApiDeactivateTargetPlatformRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetPlatformsApiService.DeactivateTargetPlatform")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/targets/{PlatformName}/deactivate"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteTargetPlatformRequest struct {
	ctx _context.Context
	ApiService *TargetPlatformsApiService
	authorization *string
	contentType *string
	platformName string
}

// Session Authorization Token
func (r ApiDeleteTargetPlatformRequest) Authorization(authorization string) ApiDeleteTargetPlatformRequest {
	r.authorization = &authorization
	return r
}
func (r ApiDeleteTargetPlatformRequest) ContentType(contentType string) ApiDeleteTargetPlatformRequest {
	r.contentType = &contentType
	return r
}

func (r ApiDeleteTargetPlatformRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteTargetPlatformExecute(r)
}

/*
DeleteTargetPlatform Delete Target Platform

This method allows Vault Admins to delete a target platform.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiDeleteTargetPlatformRequest
*/
func (a *TargetPlatformsApiService) DeleteTargetPlatform(ctx _context.Context, platformName string) ApiDeleteTargetPlatformRequest {
	return ApiDeleteTargetPlatformRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *TargetPlatformsApiService) DeleteTargetPlatformExecute(r ApiDeleteTargetPlatformRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetPlatformsApiService.DeleteTargetPlatform")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/targets/{PlatformName}"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDuplicateTargetPlatformsRequest struct {
	ctx _context.Context
	ApiService *TargetPlatformsApiService
	authorization *string
	contentType *string
	platformName string
	body *string
}

// Session Authorization Token
func (r ApiDuplicateTargetPlatformsRequest) Authorization(authorization string) ApiDuplicateTargetPlatformsRequest {
	r.authorization = &authorization
	return r
}
func (r ApiDuplicateTargetPlatformsRequest) ContentType(contentType string) ApiDuplicateTargetPlatformsRequest {
	r.contentType = &contentType
	return r
}
// This method allows Vault Admins to duplicate target platforms.
func (r ApiDuplicateTargetPlatformsRequest) Body(body string) ApiDuplicateTargetPlatformsRequest {
	r.body = &body
	return r
}

func (r ApiDuplicateTargetPlatformsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DuplicateTargetPlatformsExecute(r)
}

/*
DuplicateTargetPlatforms Duplicate Target Platforms

This method allows Vault Admins to duplicate target platforms.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiDuplicateTargetPlatformsRequest
*/
func (a *TargetPlatformsApiService) DuplicateTargetPlatforms(ctx _context.Context, platformName string) ApiDuplicateTargetPlatformsRequest {
	return ApiDuplicateTargetPlatformsRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *TargetPlatformsApiService) DuplicateTargetPlatformsExecute(r ApiDuplicateTargetPlatformsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetPlatformsApiService.DuplicateTargetPlatforms")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/targets/{PlatformName}/duplicate"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTargetPlatformsRequest struct {
	ctx _context.Context
	ApiService *TargetPlatformsApiService
	authorization *string
	contentType *string
}

// Session Authorization Token
func (r ApiGetTargetPlatformsRequest) Authorization(authorization string) ApiGetTargetPlatformsRequest {
	r.authorization = &authorization
	return r
}
func (r ApiGetTargetPlatformsRequest) ContentType(contentType string) ApiGetTargetPlatformsRequest {
	r.contentType = &contentType
	return r
}

func (r ApiGetTargetPlatformsRequest) Execute() (Model200, *_nethttp.Response, error) {
	return r.ApiService.GetTargetPlatformsExecute(r)
}

/*
GetTargetPlatforms Get Target Platforms

This method allows users to retrieve basic information of all existing target platforms.

You can use filters to retrieve a subset of the target platforms or search for a specific target platform. For details, see [URL parameters](https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/11.6/en/Content/SDK/rest-api-get-target-platforms.htm#URL%C2%A0para).

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTargetPlatformsRequest
*/
func (a *TargetPlatformsApiService) GetTargetPlatforms(ctx _context.Context) ApiGetTargetPlatformsRequest {
	return ApiGetTargetPlatformsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Model200
func (a *TargetPlatformsApiService) GetTargetPlatformsExecute(r ApiGetTargetPlatformsRequest) (Model200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Model200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetPlatformsApiService.GetTargetPlatforms")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/targets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return localVarReturnValue, nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
