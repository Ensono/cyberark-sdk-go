/*
CyberArkIAG

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 18a45ad8-77e8-4ecc-873e-787c6de10a60
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// RotationalGroupPlatformsApiService RotationalGroupPlatformsApi service
type RotationalGroupPlatformsApiService service

type ApiActivateRotationalGroupPlatformRequest struct {
	ctx _context.Context
	ApiService *RotationalGroupPlatformsApiService
	authorization *string
	contentType *string
	platformName string
}

// Session Authorization Token
func (r ApiActivateRotationalGroupPlatformRequest) Authorization(authorization string) ApiActivateRotationalGroupPlatformRequest {
	r.authorization = &authorization
	return r
}
func (r ApiActivateRotationalGroupPlatformRequest) ContentType(contentType string) ApiActivateRotationalGroupPlatformRequest {
	r.contentType = &contentType
	return r
}

func (r ApiActivateRotationalGroupPlatformRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ActivateRotationalGroupPlatformExecute(r)
}

/*
ActivateRotationalGroupPlatform Activate Rotational Group Platform

This method allows Vault Admins to activate a rotational group platform.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiActivateRotationalGroupPlatformRequest
*/
func (a *RotationalGroupPlatformsApiService) ActivateRotationalGroupPlatform(ctx _context.Context, platformName string) ApiActivateRotationalGroupPlatformRequest {
	return ApiActivateRotationalGroupPlatformRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *RotationalGroupPlatformsApiService) ActivateRotationalGroupPlatformExecute(r ApiActivateRotationalGroupPlatformRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RotationalGroupPlatformsApiService.ActivateRotationalGroupPlatform")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/rotationalGroups/{PlatformName}/activate"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeactivateRotationalGroupPlatformRequest struct {
	ctx _context.Context
	ApiService *RotationalGroupPlatformsApiService
	authorization *string
	contentType *string
	platformName string
}

// Session Authorization Token
func (r ApiDeactivateRotationalGroupPlatformRequest) Authorization(authorization string) ApiDeactivateRotationalGroupPlatformRequest {
	r.authorization = &authorization
	return r
}
func (r ApiDeactivateRotationalGroupPlatformRequest) ContentType(contentType string) ApiDeactivateRotationalGroupPlatformRequest {
	r.contentType = &contentType
	return r
}

func (r ApiDeactivateRotationalGroupPlatformRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeactivateRotationalGroupPlatformExecute(r)
}

/*
DeactivateRotationalGroupPlatform Deactivate Rotational Group Platform

This method allows Vault Admins to deactivate a rotational group platform.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiDeactivateRotationalGroupPlatformRequest
*/
func (a *RotationalGroupPlatformsApiService) DeactivateRotationalGroupPlatform(ctx _context.Context, platformName string) ApiDeactivateRotationalGroupPlatformRequest {
	return ApiDeactivateRotationalGroupPlatformRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *RotationalGroupPlatformsApiService) DeactivateRotationalGroupPlatformExecute(r ApiDeactivateRotationalGroupPlatformRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RotationalGroupPlatformsApiService.DeactivateRotationalGroupPlatform")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/rotationalGroups/{PlatformName}/deactivate"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteRotationalGroupPlatformRequest struct {
	ctx _context.Context
	ApiService *RotationalGroupPlatformsApiService
	authorization *string
	contentType *string
	platformName string
}

// Session Authorization Token
func (r ApiDeleteRotationalGroupPlatformRequest) Authorization(authorization string) ApiDeleteRotationalGroupPlatformRequest {
	r.authorization = &authorization
	return r
}
func (r ApiDeleteRotationalGroupPlatformRequest) ContentType(contentType string) ApiDeleteRotationalGroupPlatformRequest {
	r.contentType = &contentType
	return r
}

func (r ApiDeleteRotationalGroupPlatformRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteRotationalGroupPlatformExecute(r)
}

/*
DeleteRotationalGroupPlatform Delete Rotational Group Platform

This method allows Vault Admins to delete a rotational group platform.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiDeleteRotationalGroupPlatformRequest
*/
func (a *RotationalGroupPlatformsApiService) DeleteRotationalGroupPlatform(ctx _context.Context, platformName string) ApiDeleteRotationalGroupPlatformRequest {
	return ApiDeleteRotationalGroupPlatformRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *RotationalGroupPlatformsApiService) DeleteRotationalGroupPlatformExecute(r ApiDeleteRotationalGroupPlatformRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RotationalGroupPlatformsApiService.DeleteRotationalGroupPlatform")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/rotationalGroups/{PlatformName}"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDuplicateRotationalGroupPlatformsRequest struct {
	ctx _context.Context
	ApiService *RotationalGroupPlatformsApiService
	authorization *string
	contentType *string
	platformName string
	body *string
}

// Session Authorization Token
func (r ApiDuplicateRotationalGroupPlatformsRequest) Authorization(authorization string) ApiDuplicateRotationalGroupPlatformsRequest {
	r.authorization = &authorization
	return r
}
func (r ApiDuplicateRotationalGroupPlatformsRequest) ContentType(contentType string) ApiDuplicateRotationalGroupPlatformsRequest {
	r.contentType = &contentType
	return r
}
// This method allows Vault Admins to duplicate rotational group platforms.
func (r ApiDuplicateRotationalGroupPlatformsRequest) Body(body string) ApiDuplicateRotationalGroupPlatformsRequest {
	r.body = &body
	return r
}

func (r ApiDuplicateRotationalGroupPlatformsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DuplicateRotationalGroupPlatformsExecute(r)
}

/*
DuplicateRotationalGroupPlatforms Duplicate Rotational Group Platforms

This method allows Vault Admins to duplicate rotational group platforms.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiDuplicateRotationalGroupPlatformsRequest
*/
func (a *RotationalGroupPlatformsApiService) DuplicateRotationalGroupPlatforms(ctx _context.Context, platformName string) ApiDuplicateRotationalGroupPlatformsRequest {
	return ApiDuplicateRotationalGroupPlatformsRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
func (a *RotationalGroupPlatformsApiService) DuplicateRotationalGroupPlatformsExecute(r ApiDuplicateRotationalGroupPlatformsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RotationalGroupPlatformsApiService.DuplicateRotationalGroupPlatforms")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/rotationalGroups/{PlatformName}/duplicate"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExportPlatformRequest struct {
	ctx _context.Context
	ApiService *RotationalGroupPlatformsApiService
	authorization *string
	contentType *string
	platformName string
}

func (r ApiExportPlatformRequest) Authorization(authorization string) ApiExportPlatformRequest {
	r.authorization = &authorization
	return r
}
func (r ApiExportPlatformRequest) ContentType(contentType string) ApiExportPlatformRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExportPlatformRequest) Execute() (interface{}, *_nethttp.Response, error) {
	return r.ApiService.ExportPlatformExecute(r)
}

/*
ExportPlatform Export Platform

If testing this in the Postman application, click the "Download" button after receiving the zip file stream to download the ZIP file locally.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiExportPlatformRequest
*/
func (a *RotationalGroupPlatformsApiService) ExportPlatform(ctx _context.Context, platformName string) ApiExportPlatformRequest {
	return ApiExportPlatformRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
//  @return interface{}
func (a *RotationalGroupPlatformsApiService) ExportPlatformExecute(r ApiExportPlatformRequest) (interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RotationalGroupPlatformsApiService.ExportPlatform")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PasswordVault/API/Platforms/{PlatformName}/Export"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return localVarReturnValue, nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPlatformDetailsRequest struct {
	ctx _context.Context
	ApiService *RotationalGroupPlatformsApiService
	authorization *string
	contentType *string
	platformName string
}

func (r ApiGetPlatformDetailsRequest) Authorization(authorization string) ApiGetPlatformDetailsRequest {
	r.authorization = &authorization
	return r
}
func (r ApiGetPlatformDetailsRequest) ContentType(contentType string) ApiGetPlatformDetailsRequest {
	r.contentType = &contentType
	return r
}

func (r ApiGetPlatformDetailsRequest) Execute() (Model200, *_nethttp.Response, error) {
	return r.ApiService.GetPlatformDetailsExecute(r)
}

/*
GetPlatformDetails Get Platform Details

This method retrieves details of a specified platform from the Vault.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformName
 @return ApiGetPlatformDetailsRequest
*/
func (a *RotationalGroupPlatformsApiService) GetPlatformDetails(ctx _context.Context, platformName string) ApiGetPlatformDetailsRequest {
	return ApiGetPlatformDetailsRequest{
		ApiService: a,
		ctx: ctx,
		platformName: platformName,
	}
}

// Execute executes the request
//  @return Model200
func (a *RotationalGroupPlatformsApiService) GetPlatformDetailsExecute(r ApiGetPlatformDetailsRequest) (Model200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Model200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RotationalGroupPlatformsApiService.GetPlatformDetails")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PasswordVault/API/Platforms/{PlatformName}"
	localVarPath = strings.Replace(localVarPath, "{"+"PlatformName"+"}", _neturl.PathEscape(parameterToString(r.platformName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return localVarReturnValue, nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPlatformsRequest struct {
	ctx _context.Context
	ApiService *RotationalGroupPlatformsApiService
	active *string
	platformType *string
	platformName *string
	authorization *string
	contentType *string
}

// Filter according to whether the platform is active or not. Valid values: true or false
func (r ApiGetPlatformsRequest) Active(active string) ApiGetPlatformsRequest {
	r.active = &active
	return r
}
// Filter according to the platform type. Valid values: Group or Regular
func (r ApiGetPlatformsRequest) PlatformType(platformType string) ApiGetPlatformsRequest {
	r.platformType = &platformType
	return r
}
// Searching according to the platform name.
func (r ApiGetPlatformsRequest) PlatformName(platformName string) ApiGetPlatformsRequest {
	r.platformName = &platformName
	return r
}
func (r ApiGetPlatformsRequest) Authorization(authorization string) ApiGetPlatformsRequest {
	r.authorization = &authorization
	return r
}
func (r ApiGetPlatformsRequest) ContentType(contentType string) ApiGetPlatformsRequest {
	r.contentType = &contentType
	return r
}

func (r ApiGetPlatformsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GetPlatformsExecute(r)
}

/*
GetPlatforms Get Platforms

This method returns all existing account platforms from the Vault.

You can use filters to retrieve a subset of the platforms or search for a specific platform. For details, see URL parameters.

**Note:** The [Get Platform Details](#585553e8-dea9-4617-9313-297aac8d7273) API, used to retrieve details for a specific platform, returns a different set of parameters.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPlatformsRequest
*/
func (a *RotationalGroupPlatformsApiService) GetPlatforms(ctx _context.Context) ApiGetPlatformsRequest {
	return ApiGetPlatformsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RotationalGroupPlatformsApiService) GetPlatformsExecute(r ApiGetPlatformsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RotationalGroupPlatformsApiService.GetPlatforms")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PasswordVault/API/Platforms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.active == nil {
		return nil, reportError("active is required and must be specified")
	}
	if r.platformType == nil {
		return nil, reportError("platformType is required and must be specified")
	}
	if r.platformName == nil {
		return nil, reportError("platformName is required and must be specified")
	}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	localVarQueryParams.Add("Active", parameterToString(*r.active, ""))
	localVarQueryParams.Add("PlatformType", parameterToString(*r.platformType, ""))
	localVarQueryParams.Add("PlatformName", parameterToString(*r.platformName, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetRotationalGroupPlatformsRequest struct {
	ctx _context.Context
	ApiService *RotationalGroupPlatformsApiService
	search *string
	authorization *string
	contentType *string
}

// Platform Name
func (r ApiGetRotationalGroupPlatformsRequest) Search(search string) ApiGetRotationalGroupPlatformsRequest {
	r.search = &search
	return r
}
// Session Authorization Token
func (r ApiGetRotationalGroupPlatformsRequest) Authorization(authorization string) ApiGetRotationalGroupPlatformsRequest {
	r.authorization = &authorization
	return r
}
func (r ApiGetRotationalGroupPlatformsRequest) ContentType(contentType string) ApiGetRotationalGroupPlatformsRequest {
	r.contentType = &contentType
	return r
}

func (r ApiGetRotationalGroupPlatformsRequest) Execute() (Model200, *_nethttp.Response, error) {
	return r.ApiService.GetRotationalGroupPlatformsExecute(r)
}

/*
GetRotationalGroupPlatforms Get Rotational Group Platforms

This method allows Vault Admins to retrieve basic information about all existing rotational group platforms.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRotationalGroupPlatformsRequest
*/
func (a *RotationalGroupPlatformsApiService) GetRotationalGroupPlatforms(ctx _context.Context) ApiGetRotationalGroupPlatformsRequest {
	return ApiGetRotationalGroupPlatformsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Model200
func (a *RotationalGroupPlatformsApiService) GetRotationalGroupPlatformsExecute(r ApiGetRotationalGroupPlatformsRequest) (Model200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Model200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RotationalGroupPlatformsApiService.GetRotationalGroupPlatforms")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passwordvault/api/platforms/rotationalGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.search == nil {
		return localVarReturnValue, nil, reportError("search is required and must be specified")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return localVarReturnValue, nil, reportError("contentType is required and must be specified")
	}

	localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiImportPlatformRequest struct {
	ctx _context.Context
	ApiService *RotationalGroupPlatformsApiService
	authorization *string
	contentType *string
	body *string
}

func (r ApiImportPlatformRequest) Authorization(authorization string) ApiImportPlatformRequest {
	r.authorization = &authorization
	return r
}
func (r ApiImportPlatformRequest) ContentType(contentType string) ApiImportPlatformRequest {
	r.contentType = &contentType
	return r
}
// This method enables administrators to import new platforms and dependencies.
func (r ApiImportPlatformRequest) Body(body string) ApiImportPlatformRequest {
	r.body = &body
	return r
}

func (r ApiImportPlatformRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ImportPlatformExecute(r)
}

/*
ImportPlatform Import Platform

This method enables administrators to import new platforms and dependencies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImportPlatformRequest
*/
func (a *RotationalGroupPlatformsApiService) ImportPlatform(ctx _context.Context) ApiImportPlatformRequest {
	return ApiImportPlatformRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RotationalGroupPlatformsApiService) ImportPlatformExecute(r ApiImportPlatformRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RotationalGroupPlatformsApiService.ImportPlatform")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/API/Platforms/Import"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
