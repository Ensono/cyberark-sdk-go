/*
CyberArkIAG

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 18a45ad8-77e8-4ecc-873e-787c6de10a60
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AccountGroupsApiService AccountGroupsApi service
type AccountGroupsApiService service

type ApiAddAccountGroupRequest struct {
	ctx _context.Context
	ApiService *AccountGroupsApiService
	authorization *string
	contentType *string
	body *string
}

func (r ApiAddAccountGroupRequest) Authorization(authorization string) ApiAddAccountGroupRequest {
	r.authorization = &authorization
	return r
}
func (r ApiAddAccountGroupRequest) ContentType(contentType string) ApiAddAccountGroupRequest {
	r.contentType = &contentType
	return r
}
// This method enables application managers to define a new account group automatically, and manage accounts as part of a group.  To create an account group, users require the following permissions in the Safe where the group is created: * Add accounts * Update account content * Update account properties * Create folders  **Note:** _The following characters are not supported in URL values in the Body:_ **+ &amp; % #**
func (r ApiAddAccountGroupRequest) Body(body string) ApiAddAccountGroupRequest {
	r.body = &body
	return r
}

func (r ApiAddAccountGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AddAccountGroupExecute(r)
}

/*
AddAccountGroup Add Account Group

This method enables application managers to define a new account group automatically, and manage accounts as part of a group.

To create an account group, users require the following permissions in the Safe where the group is created:
* Add accounts
* Update account content
* Update account properties
* Create folders

**Note:** _The following characters are not supported in URL values in the Body:_ **+ & % #**

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddAccountGroupRequest
*/
func (a *AccountGroupsApiService) AddAccountGroup(ctx _context.Context) ApiAddAccountGroupRequest {
	return ApiAddAccountGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AccountGroupsApiService) AddAccountGroupExecute(r ApiAddAccountGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountGroupsApiService.AddAccountGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/API/AccountGroups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAddAccounttoAccountGroupRequest struct {
	ctx _context.Context
	ApiService *AccountGroupsApiService
	authorization *string
	contentType *string
	groupName string
	body *string
}

func (r ApiAddAccounttoAccountGroupRequest) Authorization(authorization string) ApiAddAccounttoAccountGroupRequest {
	r.authorization = &authorization
	return r
}
func (r ApiAddAccounttoAccountGroupRequest) ContentType(contentType string) ApiAddAccounttoAccountGroupRequest {
	r.contentType = &contentType
	return r
}
// This method adds an account as a member to an existing account group.  The account can contain either a password or SSH key.  All members of an account group must be stored in the same Safe as the group itself.  To add an account as a member to an account group, users require the following permissions to the Safe where the group is created: * Add accounts * Update account content * Update account properties  **Note:** _The following characters are not support in URL values in the Body:_ **+ &amp; % #**
func (r ApiAddAccounttoAccountGroupRequest) Body(body string) ApiAddAccounttoAccountGroupRequest {
	r.body = &body
	return r
}

func (r ApiAddAccounttoAccountGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AddAccounttoAccountGroupExecute(r)
}

/*
AddAccounttoAccountGroup Add Account to Account Group

This method adds an account as a member to an existing account group.  The account can contain either a password or SSH key.  All members of an account group must be stored in the same Safe as the group itself.

To add an account as a member to an account group, users require the following permissions to the Safe where the group is created:
* Add accounts
* Update account content
* Update account properties

**Note:** _The following characters are not support in URL values in the Body:_ **+ & % #**

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupName
 @return ApiAddAccounttoAccountGroupRequest
*/
func (a *AccountGroupsApiService) AddAccounttoAccountGroup(ctx _context.Context, groupName string) ApiAddAccounttoAccountGroupRequest {
	return ApiAddAccounttoAccountGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupName: groupName,
	}
}

// Execute executes the request
func (a *AccountGroupsApiService) AddAccounttoAccountGroupExecute(r ApiAddAccounttoAccountGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountGroupsApiService.AddAccounttoAccountGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/API/AccountGroups/{GroupName}/Members"
	localVarPath = strings.Replace(localVarPath, "{"+"GroupName"+"}", _neturl.PathEscape(parameterToString(r.groupName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteMemberfromAccountGroupRequest struct {
	ctx _context.Context
	ApiService *AccountGroupsApiService
	authorization *string
	contentType *string
	groupName string
	accountID string
}

func (r ApiDeleteMemberfromAccountGroupRequest) Authorization(authorization string) ApiDeleteMemberfromAccountGroupRequest {
	r.authorization = &authorization
	return r
}
func (r ApiDeleteMemberfromAccountGroupRequest) ContentType(contentType string) ApiDeleteMemberfromAccountGroupRequest {
	r.contentType = &contentType
	return r
}

func (r ApiDeleteMemberfromAccountGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteMemberfromAccountGroupExecute(r)
}

/*
DeleteMemberfromAccountGroup Delete Member from Account Group

This method removes an account member from an account group. This account can be either a password account or an SSH Key account.

The user performing this task must have the following permissions in the Safe:

* Add accounts
* Update account content
* Update account properties
* Create folders

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupName
 @param accountID
 @return ApiDeleteMemberfromAccountGroupRequest
*/
func (a *AccountGroupsApiService) DeleteMemberfromAccountGroup(ctx _context.Context, groupName string, accountID string) ApiDeleteMemberfromAccountGroupRequest {
	return ApiDeleteMemberfromAccountGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupName: groupName,
		accountID: accountID,
	}
}

// Execute executes the request
func (a *AccountGroupsApiService) DeleteMemberfromAccountGroupExecute(r ApiDeleteMemberfromAccountGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountGroupsApiService.DeleteMemberfromAccountGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PasswordVault/API/AccountGroups/{GroupName}/Members/{AccountID}"
	localVarPath = strings.Replace(localVarPath, "{"+"GroupName"+"}", _neturl.PathEscape(parameterToString(r.groupName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"AccountID"+"}", _neturl.PathEscape(parameterToString(r.accountID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAccountGroupMembersRequest struct {
	ctx _context.Context
	ApiService *AccountGroupsApiService
	authorization *string
	contentType *string
	groupName string
}

func (r ApiGetAccountGroupMembersRequest) Authorization(authorization string) ApiGetAccountGroupMembersRequest {
	r.authorization = &authorization
	return r
}
func (r ApiGetAccountGroupMembersRequest) ContentType(contentType string) ApiGetAccountGroupMembersRequest {
	r.contentType = &contentType
	return r
}

func (r ApiGetAccountGroupMembersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GetAccountGroupMembersExecute(r)
}

/*
GetAccountGroupMembers Get Account Group Members

This method returns all the members of an existing account group. These accounts can be either password accounts or SSH Key accounts.

__NOTE: All members of account groups must be stored in the same Safe as the group itself.__

The user performing this task must have the following permissions in the Safe:

* Add accounts
* Update account content
* Update account properties
* Create folders

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupName
 @return ApiGetAccountGroupMembersRequest
*/
func (a *AccountGroupsApiService) GetAccountGroupMembers(ctx _context.Context, groupName string) ApiGetAccountGroupMembersRequest {
	return ApiGetAccountGroupMembersRequest{
		ApiService: a,
		ctx: ctx,
		groupName: groupName,
	}
}

// Execute executes the request
func (a *AccountGroupsApiService) GetAccountGroupMembersExecute(r ApiGetAccountGroupMembersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountGroupsApiService.GetAccountGroupMembers")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PasswordVault/API/AccountGroups/{GroupName}/Members"
	localVarPath = strings.Replace(localVarPath, "{"+"GroupName"+"}", _neturl.PathEscape(parameterToString(r.groupName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAccountGroupbySafeRequest struct {
	ctx _context.Context
	ApiService *AccountGroupsApiService
	safe *string
	authorization *string
	contentType *string
}

func (r ApiGetAccountGroupbySafeRequest) Safe(safe string) ApiGetAccountGroupbySafeRequest {
	r.safe = &safe
	return r
}
func (r ApiGetAccountGroupbySafeRequest) Authorization(authorization string) ApiGetAccountGroupbySafeRequest {
	r.authorization = &authorization
	return r
}
func (r ApiGetAccountGroupbySafeRequest) ContentType(contentType string) ApiGetAccountGroupbySafeRequest {
	r.contentType = &contentType
	return r
}

func (r ApiGetAccountGroupbySafeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GetAccountGroupbySafeExecute(r)
}

/*
GetAccountGroupbySafe Get Account Group by Safe

This method returns all the account groups in a specific Safe. The user performing this task must have the following permissions in the Safe:

* Add accounts
* Update account content
* Update account properties
* Create folders

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAccountGroupbySafeRequest
*/
func (a *AccountGroupsApiService) GetAccountGroupbySafe(ctx _context.Context) ApiGetAccountGroupbySafeRequest {
	return ApiGetAccountGroupbySafeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AccountGroupsApiService) GetAccountGroupbySafeExecute(r ApiGetAccountGroupbySafeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountGroupsApiService.GetAccountGroupbySafe")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PasswordVault/API/AccountGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.safe == nil {
		return nil, reportError("safe is required and must be specified")
	}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.contentType == nil {
		return nil, reportError("contentType is required and must be specified")
	}

	localVarQueryParams.Add("Safe", parameterToString(*r.safe, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
